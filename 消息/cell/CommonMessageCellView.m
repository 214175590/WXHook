//
//  CommonMessageCellView.m
//
//  Generated by Class Decompile.
//  Repository is https://github.com/poboke/Class-Decompile
//  Copyright Â© 2016 www.poboke.com. All rights reserved.
//

@implementation CommonMessageCellView

- (id)initWithViewModel:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    *(int32_t *)(r31 + 0xfffffffffffffff0) = self;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d52a8;
    r19 = [[0x0 super] initWithViewModel:arg2];
    if (r19 != 0x0) {
            [r19 setIsAccessibilityElement:0x1];
    }
    r0 = r19;
    0x0 = 0x10 - 0x10;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return r0;
}

- (void)setViewModel:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r19 = self;
    *(int32_t *)(r31 + 0xfffffffffffffff0) = r19;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d52a8;
    [[0x0 super] setViewModel:arg2];
    r20 = @selector(viewModel);
    r0 = [r19 viewModel];
    r29 = 0x50;
    r21 = [r0 retain];
    if (r21 == 0x0) goto loc_102477acc;
    goto loc_102477844;

loc_102477acc:
    r0 = r21;

loc_102477ad0:
    r0 = [r0 release];

loc_102477ad4:
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return;

loc_102477844:
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r23 = r0;
    r22 = @selector(contact);
    r0 = [r0 contact];
    r29 = 0x50;
    r0 = [r0 retain];
    r24 = r0;
    [r0 release];
    [r23 release];
    r0 = [r21 release];
    if (r24 == 0x0) goto loc_102477ad4;
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 contact];
    r0 = [r0 retain];
    r20 = [[r0 m_nsUsrName] retain];
    [r0 release];
    [r21 release];
    r21 = @selector(defaultCenter);
    r26 = [[MMServiceCenter defaultCenter] retain];
    r22 = @selector(class);
    [MMExtensionCenter class];
    r23 = @selector(getService:);
    r0 = [r26 getService:r2];
    r0 = [r0 retain];
    r27 = r0;
    r24 = @selector(getExtension:);
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r25 = [r0 retain];
    [r27 release];
    [r26 release];
    if (r25 != 0x0) {
            [r25 registerExtension:r19 forKey:r20];
    }
    [r25 release];
    r26 = [[MMServiceCenter defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r26 getService:r2];
    r0 = [r0 retain];
    r27 = r0;
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r25 = [r0 retain];
    [r27 release];
    [r26 release];
    if (r25 != 0x0) {
            [r25 registerExtension:r19 forKey:r20];
    }
    [r25 release];
    r25 = [[MMServiceCenter defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r25 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r21 = [r0 retain];
    [r22 release];
    [r25 release];
    if (r21 != 0x0) {
            [r21 registerExtension:r19 forKey:r20];
    }
    [r21 release];
    r0 = r20;
    goto loc_102477ad0;
}

- (void)prepareForReuse
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r19 = self;
    *(int32_t *)(r31 + 0xfffffffffffffff0) = r19;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d52a8;
    [[0x0 super] prepareForReuse];
    r20 = @selector(viewModel);
    r0 = [r19 viewModel];
    r29 = 0x50;
    r21 = [r0 retain];
    if (r21 == 0x0) goto loc_102477de0;
    goto loc_102477b58;

loc_102477de0:
    r0 = r21;

loc_102477de4:
    r0 = [r0 release];

loc_102477de8:
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return;

loc_102477b58:
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r23 = r0;
    r22 = @selector(contact);
    r0 = [r0 contact];
    r29 = 0x50;
    r0 = [r0 retain];
    r24 = r0;
    [r0 release];
    [r23 release];
    r0 = [r21 release];
    if (r24 == 0x0) goto loc_102477de8;
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 contact];
    r0 = [r0 retain];
    r20 = [[r0 m_nsUsrName] retain];
    [r0 release];
    [r21 release];
    r21 = @selector(defaultCenter);
    r26 = [[MMServiceCenter defaultCenter] retain];
    r22 = @selector(class);
    [MMExtensionCenter class];
    r23 = @selector(getService:);
    r0 = [r26 getService:r2];
    r0 = [r0 retain];
    r27 = r0;
    r24 = @selector(getExtension:);
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r25 = [r0 retain];
    [r27 release];
    [r26 release];
    if (r25 != 0x0) {
            [r25 unregisterExtension:r19 forKey:r20];
    }
    [r25 release];
    r26 = [[MMServiceCenter defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r26 getService:r2];
    r0 = [r0 retain];
    r27 = r0;
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r25 = [r0 retain];
    [r27 release];
    [r26 release];
    if (r25 != 0x0) {
            [r25 unregisterExtension:r19 forKey:r20];
    }
    [r25 release];
    r25 = [[MMServiceCenter defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r25 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r21 = [r0 retain];
    [r22 release];
    [r25 release];
    if (r21 != 0x0) {
            [r21 unregisterExtension:r19 forKey:r20];
    }
    [r21 release];
    r0 = r20;
    goto loc_102477de4;
}

- (void)dealloc
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x10;
    r19 = self;
    r20 = @selector(viewModel);
    r0 = [self viewModel];
    r0 = [r0 retain];
    r22 = r0;
    r21 = @selector(contact);
    r0 = [r0 contact];
    r29 = 0x50;
    r0 = [r0 retain];
    r23 = r0;
    [r0 release];
    [r22 release];
    if (r23 != 0x0) {
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 contact];
            r0 = [r0 retain];
            r24 = [[r0 m_nsUsrName] retain];
            [r0 release];
            [r20 release];
            r20 = @selector(defaultCenter);
            r26 = [[MMServiceCenter defaultCenter] retain];
            r21 = @selector(class);
            [MMExtensionCenter class];
            r22 = @selector(getService:);
            r0 = [r26 getService:r2];
            r0 = [r0 retain];
            r27 = r0;
            r23 = @selector(getExtension:);
            r0 = [r0 getExtension:r2];
            r29 = 0x50;
            r25 = [r0 retain];
            [r27 release];
            [r26 release];
            if (r25 != 0x0) {
                    [r25 unregisterExtension:r19 forKey:r24];
            }
            [r25 release];
            r26 = [[MMServiceCenter defaultCenter] retain];
            [*(int32_t *)(0x1039c3000 + 0x498) class];
            r0 = [r26 getService:r2];
            r0 = [r0 retain];
            r27 = r0;
            r0 = [r0 getExtension:r2];
            r29 = r29;
            r25 = [r0 retain];
            [r27 release];
            [r26 release];
            if (r25 != 0x0) {
                    [r25 unregisterExtension:r19 forKey:r24];
            }
            [r25 release];
            r26 = [[MMServiceCenter defaultCenter] retain];
            [*(int32_t *)(0x1039c3000 + 0x498) class];
            r0 = [r26 getService:r2];
            r0 = [r0 retain];
            r27 = r0;
            r0 = [r0 getExtension:r2];
            r29 = r29;
            r25 = [r0 retain];
            [r27 release];
            [r26 release];
            if (r25 != 0x0) {
                    [r25 unregisterExtension:r19 forKey:r24];
            }
            [r25 release];
            [r24 release];
    }
    else {
            r20 = @selector(defaultCenter);
            asm{ nop         };
            r21 = @selector(class);
            r22 = @selector(getService:);
            asm{ nop         };
            r23 = @selector(getExtension:);
    }
    r24 = [[MMServiceCenter viewModel] retain];
    [MMExtensionCenter contact];
    r0 = objc_msgSend(r24, r22);
    r0 = [r0 retain];
    r21 = r0;
    r0 = objc_msgSend(r0, r23);
    r29 = r29;
    r20 = [r0 retain];
    [r21 release];
    [r24 release];
    if (r20 != 0x0) {
            [r20 unregisterExtension:r19];
    }
    [r20 release];
    *(int32_t *)r31 = r19;
    *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d52a8;
    r0 = [[0x0 super] dealloc];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return;
}

- (void)layoutInternal
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0x60;
    r19 = self;
    [self removeAllSubViews];
    r20 = @selector(viewModel);
    r0 = [r19 viewModel];
    r29 = 0x60;
    r0 = [r0 retain];
    r21 = r0;
    r22 = @selector(isHeadPart);
    if ([r0 isHeadPart] != 0x0) {
            asm{ nop         };
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r24 = r0;
            r0 = [r0 getValueOfProperty:@"message_node_bkg_margin_top" inRuleSet:@"#message_node_view"];
            r29 = 0x60;
            r25 = [r0 retain];
            r2 = r25;
            [MMThemeUtil parseFloatFromValues:r2];
            *(int32_t *)(r31 + 0x40) = q0;
            [r25 release];
            [r24 release];
    }
    else {
            asm{ movi.16b   v0, #0x0 };
            *(int32_t *)(r31 + 0x40) = q0;
    }
    [r21 release];
    r0 = [r19 viewModel];
    r29 = r29;
    r0 = [r0 retain];
    r23 = r0;
    r21 = @selector(isShowHeadImage);
    if (([r0 isShowHeadImage] & 0x1 << 0x0) != 0x0) {
            r0 = [r19 viewModel];
            r29 = r29;
            r0 = [r0 retain];
            r25 = [r0 isHeadPart];
            [r0 release];
            [r23 release];
            if (r25 != 0x0) {
                    [r19 initHeadImageView];
            }
    }
    else {
            [r23 release];
    }
    r0 = [r19 viewModel];
    r29 = r29;
    r0 = [r0 retain];
    r23 = r0;
    if (([r0 isShowChatRoomDisplayName] & 0x1 << 0x0) == 0x0) goto loc_102478420;
    goto loc_102478344;

loc_102478420:
    [r23 release];

loc_102478428:
    r0 = [UIView alloc];
    asm{ ldp        d0, d1, [x8] };
    asm{ ldp        d2, d3, [x8, #0x10] };
    r0 = [r0 initWithFrame:r2];
    asm{ nop         };
    asm{ ldrsw      x28, [x8, #0x6b4] };
    r8 = *(int32_t *)(r19 + r28);
    *(int32_t *)(r19 + r28) = r0;
    [r8 release];
    r2 = *(int32_t *)(r19 + r28);
    [r19 addSubview:r2];
    r0 = [r19 viewModel];
    r29 = r29;
    r0 = [r0 retain];
    r23 = [r0 isChatRoomMessageUnsafe];
    [r0 release];
    if (r23 != 0x0) {
            [r19 initCrashWarningLabel];
            [r19 layoutForCrashWarning];
    }
    else {
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 cpKeyForChatRoomMessage];
            r29 = r29;
            r23 = [r0 retain];
            sub_1028a5014(0x58, r23);
            [r23 release];
            [r22 release];
            [r19 layoutContentView];
            sub_1028a50bc(0x58);
    }
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r23 = [r0 isSender];
    [r0 release];
    r0 = [r19 viewModel];
    r29 = r29;
    r0 = [r0 retain];
    r22 = r0;
    r21 = [r0 isShowHeadImage];
    [r22 release];
    if (r23 != 0x0) {
            if (r21 != 0x0) {
                    *(int32_t *)(r31 + 0x18) = @selector(width);
                    [r19 width];
                    asm{ nop         };
                    r22 = @selector(sharedThemeManager);
                    *(int32_t *)(r31 + 0x20) = r22;
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r24 = r0;
                    *(int32_t *)(r31 + 0x28) = @selector(getValueOfProperty:inRuleSet:);
                    r0 = [r0 getValueOfProperty:@"message_node_headImgBorder_leftMargin" inRuleSet:@"#message_node_view"];
                    r0 = [r0 retain];
                    *(int32_t *)(r31 + 0x38) = r28;
                    r28 = r0;
                    [MMThemeUtil parseFloatFromValues:r28];
                    asm{ fsub       d8, d8, d0 };
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r27 = r0;
                    r25 = [[r0 getValueOfProperty:@"text_message_margin_top" inRuleSet:@"#message_node_view"] retain];
                    [MMThemeUtil parseFloatFromValues:r25];
                    asm{ fadd       d9, d0, d0 };
                    r0 = [UIFont systemFont];
                    r0 = [r0 retain];
                    r26 = r0;
                    [r0 lineHeight];
                    asm{ frintp     d0, d0 };
                    asm{ fadd       d0, d9, d0 };
                    asm{ fsub       d8, d8, d0 };
                    [r26 release];
                    [r25 release];
                    [r27 release];
                    [r28 release];
                    [r24 release];
                    asm{ ldrsw      x8, [x8, #0xe5c] };
                    r25 = *(int32_t *)(r19 + 0x1039ee000);
                    asm{ nop         };
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r26 = r0;
                    r27 = [[r0 getValueOfProperty:@"message_node_bkg_margin_top" inRuleSet:@"#message_node_view"] retain];
                    [MMThemeUtil parseFloatFromValues:r27];
                    *(int32_t *)(r31 + 0x30) = @selector(setOrigin:);
                    [r25 setOrigin:r27];
                    [r27 release];
                    [r26 release];
                    r25 = *(int32_t *)(r19 + *(int32_t *)(r31 + 0x38));
                    objc_msgSend(r25, *(int32_t *)(r31 + 0x18));
                    asm{ fsub       d8, d8, d0 };
                    asm{ nop         };
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r27 = r0;
                    r23 = @selector(parseFloatFromValues:);
                    r0 = [r0 getValueOfProperty:@"message_node_headImgBorder_leftMargin" inRuleSet:@"#message_node_view"];
                    r29 = r29;
                    r28 = [r0 retain];
                    r2 = r28;
                    [MMThemeUtil parseFloatFromValues:r2];
                    asm{ fsub       d0, d8, d0 };
                    [r25 setOrigin:r2];
                    r0 = r28;
                    r28 = *(int32_t *)(r31 + 0x38);
                    [r0 release];
                    [r27 release];
            }
            else {
                    r25 = *(int32_t *)(r19 + r28);
                    [r19 width];
                    r0 = *(int32_t *)(r19 + r28);
                    [r0 width];
                    asm{ fsub       d8, d8, d0 };
                    asm{ nop         };
                    *(int32_t *)(r31 + 0x20) = @selector(sharedThemeManager);
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r26 = r0;
                    *(int32_t *)(r31 + 0x28) = @selector(getValueOfProperty:inRuleSet:);
                    r0 = [r0 getValueOfProperty:@"message_node_headImgBorder_leftMargin" inRuleSet:@"#message_node_view"];
                    r29 = r29;
                    r27 = [r0 retain];
                    r23 = @selector(parseFloatFromValues:);
                    r2 = r27;
                    [MMThemeUtil parseFloatFromValues:r2];
                    asm{ fsub       d0, d8, d0 };
                    *(int32_t *)(r31 + 0x30) = @selector(setOrigin:);
                    [r25 setOrigin:r2];
                    [r27 release];
                    [r26 release];
            }
    }
    else {
            if (r21 != 0x0) {
                    asm{ ldrsw      x8, [x8, #0xe5c] };
                    *(int32_t *)(r31 + 0x18) = *(int32_t *)(r19 + 0x1039ee000);
                    asm{ nop         };
                    *(int32_t *)(r31 + 0x20) = @selector(sharedThemeManager);
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r26 = r0;
                    *(int32_t *)(r31 + 0x28) = @selector(getValueOfProperty:inRuleSet:);
                    r27 = [[r0 getValueOfProperty:@"message_node_headImgBorder_leftMargin" inRuleSet:0x103262000] retain];
                    [MMThemeUtil parseFloatFromValues:r27];
                    asm{ nop         };
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    *(int32_t *)(r31 + 0x38) = r28;
                    r28 = r0;
                    r21 = [[r0 getValueOfProperty:@"message_node_bkg_margin_top" inRuleSet:@"#message_node_view"] retain];
                    [MMThemeUtil parseFloatFromValues:r21];
                    *(int32_t *)(r31 + 0x30) = @selector(setOrigin:);
                    r0 = *(int32_t *)(r31 + 0x18);
                    [r0 setOrigin:r21];
                    [r21 release];
                    [r28 release];
                    [r27 release];
                    [r26 release];
                    *(int32_t *)(r31 + 0x10) = *(int32_t *)(r19 + *(int32_t *)(r31 + 0x38));
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    *(int32_t *)(r31 + 0x18) = r0;
                    r0 = [r0 getValueOfProperty:@"message_node_headImgBorder_leftMargin" inRuleSet:@"#message_node_view"];
                    r0 = [r0 retain];
                    *(int32_t *)(r31 + 0x8) = r0;
                    [MMThemeUtil parseFloatFromValues:r0];
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r28 = r0;
                    r26 = [[r0 getValueOfProperty:@"text_message_margin_top" inRuleSet:@"#message_node_view"] retain];
                    [MMThemeUtil parseFloatFromValues:r26];
                    asm{ fadd       d9, d0, d0 };
                    r0 = [UIFont systemFont];
                    r0 = [r0 retain];
                    r21 = r0;
                    [r0 lineHeight];
                    asm{ frintp     d0, d0 };
                    asm{ fadd       d0, d9, d0 };
                    asm{ fadd       d8, d8, d0 };
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r27 = r0;
                    r23 = @selector(parseFloatFromValues:);
                    r0 = [r0 getValueOfProperty:@"message_node_headImgBorder_leftMargin" inRuleSet:@"#message_node_view"];
                    r29 = r29;
                    r22 = [r0 retain];
                    r2 = r22;
                    [MMThemeUtil parseFloatFromValues:r2];
                    asm{ fadd       d0, d8, d0 };
                    r0 = *(int32_t *)(r31 + 0x10);
                    r1 = *(int32_t *)(r31 + 0x30);
                    objc_msgSend(r0, r1);
                    [r22 release];
                    [r27 release];
                    [r21 release];
                    [r26 release];
                    r0 = r28;
                    r28 = *(int32_t *)(r31 + 0x38);
                    [r0 release];
                    r0 = *(int32_t *)(r31 + 0x8);
                    [r0 release];
                    r0 = *(int32_t *)(r31 + 0x18);
            }
            else {
                    r21 = *(int32_t *)(r19 + r28);
                    r22 = MMThemeUtil;
                    asm{ nop         };
                    *(int32_t *)(r31 + 0x20) = @selector(sharedThemeManager);
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r24 = r0;
                    *(int32_t *)(r31 + 0x28) = @selector(getValueOfProperty:inRuleSet:);
                    r0 = [r0 getValueOfProperty:@"message_node_headImgBorder_leftMargin" inRuleSet:@"#message_node_view"];
                    r29 = r29;
                    r25 = [r0 retain];
                    r23 = @selector(parseFloatFromValues:);
                    r2 = r25;
                    [r22 parseFloatFromValues:r2];
                    *(int32_t *)(r31 + 0x30) = @selector(setOrigin:);
                    [r21 setOrigin:r2];
                    [r25 release];
                    r0 = r24;
            }
            [r0 release];
            asm{ ldrsw      x8, [x8, #0xe60] };
            r21 = *(int32_t *)(r19 + 0x1039ee000);
            r0 = *(int32_t *)(r19 + r28);
            [r0 x];
            [r21 setX:r2];
    }
    r0 = [r19 viewModel];
    r29 = r29;
    r0 = [r0 retain];
    r25 = r0;
    if (([r0 isShowSourceView] & 0x1 << 0x0) == 0x0) goto loc_102478f78;
    goto loc_102478cb4;

loc_102478f78:
    r0 = r25;

loc_10247903c:
    [r0 release];

loc_102479040:
    r0 = [r19 viewModel];
    r29 = r29;
    r0 = [r0 retain];
    r21 = r0;
    if (([r0 isShowAppMessageBlockButton] & 0x1 << 0x0) != 0x0) {
            r0 = [r19 viewModel];
            r29 = r29;
            r0 = [r0 retain];
            r22 = r0;
            r23 = [r0 isTailPart];
            [r22 release];
            [r21 release];
            if (r23 != 0x0) {
                    [r19 initAppMessageBlockButton];
                    asm{ ldrsw      x8, [x8, #0xe74] };
                    r21 = *(int32_t *)(r19 + 0x1039ee000);
                    r0 = *(int32_t *)(r19 + r28);
                    [r0 right];
                    r0 = *(int32_t *)(r19 + r28);
                    [r0 frame];
                    asm{ fadd       d0, d1, d3 };
                    asm{ fadd       d1, d0, d1 };
                    r1 = *(int32_t *)(r31 + 0x30);
                    objc_msgSend(r21, r1);
            }
    }
    else {
            [r21 release];
    }
    asm{ ldrsw      x23, [x8, #0xe64] };
    if (*(int32_t *)(r19 + r23) != 0x0) {
            r0 = [r19 viewModel];
            r29 = r29;
            r0 = [r0 retain];
            r22 = [r0 isTailPart];
            [r0 release];
            if ((r22 & 0x1 << 0x0) == 0x0) {
                    r21 = *(int32_t *)(r19 + r23);
                    [r21 height];
                    asm{ frintp     d0, d0 };
                    [r21 setHeight:r2];
            }
    }
    asm{ ldrsw      x22, [x8, #0xe78] };
    r0 = *(int32_t *)(r19 + r22);
    r0 = [r0 superview];
    r29 = r29;
    r0 = [r0 retain];
    r21 = r0;
    [r0 release];
    if (r21 != 0x0) {
            r21 = *(int32_t *)(r19 + r22);
            r0 = *(int32_t *)(r19 + r23);
            [r0 frame];
            [r21 setFrame:r2];
    }
    r0 = *(int32_t *)(r19 + r28);
    r21 = @selector(height);
    [r0 height];
    r0 = [r19 viewModel];
    r29 = r29;
    r0 = [r0 retain];
    r22 = r0;
    [r0 contentViewSize];
    asm{ fsub       d0, d8, d1 };
    asm{ fabs       d8, d0 };
    r0 = [r22 release];
    asm{ fmov       d0, #0x1 };
    asm{ fcmp       d8, d0 };
    if (CPU_FLAGS & LE) {
            r0 = [r19 viewModel];
            r29 = r29;
            r20 = [r0 retain];
            r0 = *(int32_t *)(r19 + r28);
            [r0 height];
            [r20 updateContentViewHeight:r2];
            r0 = [r20 release];
    }
    0x0 = r29 - 0x60;
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        x26, x25, [sp, #0x20] };
    asm{ ldp        x28, x27, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x70 };
    return;

loc_102478cb4:
    r0 = [r19 viewModel];
    r29 = r29;
    r0 = [r0 retain];
    r22 = [r0 isTailPart];
    [r0 release];
    [r25 release];
    if (r22 == 0x0) goto loc_102479040;
    r0 = [r19 viewModel];
    r29 = r29;
    r0 = [r0 retain];
    r22 = [r0 shouldShowSourceViewInContent];
    [r0 release];
    if (r22 != 0x0) {
            [r19 initSourceViewInside];
            r21 = *(int32_t *)(r19 + r28);
            asm{ nop         };
            r0 = objc_msgSend(MMThemeManager, *(int32_t *)(r31 + 0x20));
            r0 = [r0 retain];
            r24 = r0;
            r26 = r23;
            r27 = [objc_msgSend(r0, *(int32_t *)(r31 + 0x28)) retain];
            objc_msgSend(MMThemeUtil, r26);
            *(int32_t *)(r31 + 0x40) = @selector(height);
            [r21 height];
            asm{ fadd       d0, d8, d0 };
            *(int32_t *)(r31 + 0x38) = r28;
            [r21 setHeight:r27];
            [r27 release];
            [r24 release];
            asm{ ldrsw      x8, [x8, #0xe64] };
            r21 = *(int32_t *)(r19 + 0x1039ee000);
            asm{ nop         };
            r23 = *(int32_t *)(r31 + 0x20);
            r0 = objc_msgSend(MMThemeManager, r23);
            r0 = [r0 retain];
            r27 = r0;
            r24 = *(int32_t *)(r31 + 0x28);
            r25 = [objc_msgSend(r0, r24) retain];
            objc_msgSend(MMThemeUtil, r26);
            objc_msgSend(r21, *(int32_t *)(r31 + 0x40));
            asm{ fadd       d0, d8, d0 };
            r28 = *(int32_t *)(r31 + 0x38);
            [r21 setHeight:r25];
            [r25 release];
            [r27 release];
            asm{ nop         };
            r0 = objc_msgSend(MMThemeManager, r23);
            r0 = [r0 retain];
            r22 = r0;
            r24 = [objc_msgSend(r0, r24) retain];
            objc_msgSend(MMThemeUtil, r26);
            asm{ ldrsw      x8, [x8, #0xe68] };
            asm{ fadd       d0, d0, d1 };
            *(int32_t *)(0x18 + r19 + 0x1039ee000) = d0;
            [r24 release];
            [r22 release];
            asm{ ldrsw      x8, [x8, #0xe6c] };
            r21 = *(int32_t *)(r19 + 0x1039ee000);
            asm{ ldp        d8, d0, [x25] };
            asm{ fadd       d9, d0, d1 };
            r22 = MMThemeUtil;
            asm{ nop         };
            r0 = objc_msgSend(MMThemeManager, r23);
            r0 = [r0 retain];
            r24 = r0;
            r1 = *(int32_t *)(r31 + 0x28);
            r0 = objc_msgSend(r0, r1);
            r29 = r29;
            r25 = [r0 retain];
            r2 = r25;
            objc_msgSend(r22, r26);
            asm{ fsub       d1, d9, d0 };
    }
    else {
            [r19 initSourceViewBottom];
            asm{ ldrsw      x8, [x8, #0xe70] };
            r21 = *(int32_t *)(r19 + 0x1039ee000);
            r0 = *(int32_t *)(r19 + r28);
            [r0 x];
            r0 = *(int32_t *)(r19 + r28);
            [r0 frame];
            asm{ fadd       d9, d1, d3 };
            r22 = MMThemeUtil;
            asm{ nop         };
            r0 = objc_msgSend(MMThemeManager, *(int32_t *)(r31 + 0x20));
            r0 = [r0 retain];
            r24 = r0;
            r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x28));
            r29 = r29;
            r25 = [r0 retain];
            r2 = r25;
            objc_msgSend(r22, r23);
            asm{ fadd       d1, d9, d0 };
    }
    r1 = *(int32_t *)(r31 + 0x30);
    objc_msgSend(r21, r1);
    [r25 release];
    r0 = r24;
    goto loc_10247903c;

loc_102478344:
    r0 = [r19 viewModel];
    r29 = r29;
    r0 = [r0 retain];
    r22 = objc_msgSend(r0, r22);
    [r0 release];
    [r23 release];
    if (r22 == 0x0) goto loc_102478428;
    [r19 initChatRoomNameLabel];
    asm{ fmov       d0, #0x10 };
    [UIFont dynamicLength:r2];
    asm{ nop         };
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 getValueOfProperty:@"message_node_bkg_margin_top" inRuleSet:@"#message_node_view"];
    r29 = r29;
    r24 = [r0 retain];
    r2 = r24;
    [MMThemeUtil parseFloatFromValues:r2];
    asm{ fadd       d0, d8, d0 };
    asm{ frintp     d0, d0 };
    *(int32_t *)(r31 + 0x40) = q0;
    [r24 release];
    goto loc_102478420;
}

- (void)layoutContentView
{
    r0 = self;
    return;
}

- (void)updateNodeStatus
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xe7c] };
    r0 = *(int32_t *)(r19 + 0x1039ee000);
    [r0 removeFromSuperview];
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x6b8] };
    r0 = *(int32_t *)(r19 + 0x1039ea000);
    [r0 removeFromSuperview];
    asm{ ldrsw      x8, [x8, #0xe80] };
    r0 = *(int32_t *)(r19 + 0x1039ee000);
    [r0 removeFromSuperview];
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r21 = [r0 isChatRoomMessageUnsafe];
    r0 = [r0 release];
    if ((r21 & 0x1 << 0x0) != 0x0) {
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            return;
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            r0 = [r19 updateStatus];
    }
    return;
}

- (void)updateStatus
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    r20 = @selector(viewModel);
    r0 = [self viewModel];
    r0 = [r0 retain];
    r21 = r0;
    if (([r0 isSender] & 0x1 << 0x0) == 0x0) goto loc_102479408;
    goto loc_10247938c;

loc_102479408:
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r21 release];
    return;

loc_10247938c:
    r0 = [r19 viewModel];
    r29 = 0x30;
    r0 = [r0 retain];
    r23 = [r0 isShowStatusView];
    [r0 release];
    r0 = [r21 release];
    if (r23 == 0x0) goto loc_1024794b4;
    goto loc_1024793c8;

loc_1024794b4:
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return;

loc_1024793c8:
    r0 = [r19 viewModel];
    r29 = r29;
    r0 = [r0 retain];
    r22 = [r0 isShowSendingView];
    [r0 release];
    if (r22 == 0x0) goto loc_102479420;
    goto loc_1024793fc;

loc_102479420:
    r0 = [r19 viewModel];
    r29 = r29;
    r0 = [r0 retain];
    r22 = [r0 isShowSendFailView];
    [r0 release];
    if (r22 == 0x0) goto loc_102479460;
    goto loc_102479454;

loc_102479460:
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r21 = [r0 isShowSendOKView];
    r0 = [r0 release];
    if (r21 == 0x0) goto loc_1024794b4;
    r1 = @selector(addSendOKView);

loc_10247949c:
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 addSendOKView];

loc_102479454:
    r1 = @selector(addSendFailButton);
    goto loc_10247949c;

loc_1024793fc:
    r1 = @selector(addSendingView);
    goto loc_10247949c;
}

- (void)hideUIStatus
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x6b8] };
    r0 = *(int32_t *)(self + 0x1039ea000);
    [r0 setHidden:0x1];
    asm{ ldrsw      x8, [x8, #0xe7c] };
    r0 = *(int32_t *)(self + 0x1039ee000);
    [r0 setHidden:0x1];
    asm{ ldrsw      x8, [x8, #0xe80] };
    r0 = *(int32_t *)(self + 0x1039ee000);
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r0 setHidden:0x1];
    return;
}

- (void)showUIStatus
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x6b8] };
    r0 = *(int32_t *)(self + 0x1039ea000);
    asm{ movz       w2, #0x0 };
    [r0 setHidden:r2];
    asm{ ldrsw      x8, [x8, #0xe7c] };
    r0 = *(int32_t *)(self + 0x1039ee000);
    asm{ movz       w2, #0x0 };
    [r0 setHidden:r2];
    asm{ movz       w2, #0x0 };
    asm{ ldrsw      x8, [x8, #0xe80] };
    r0 = *(int32_t *)(self + 0x1039ee000);
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r0 setHidden:r2];
    return;
}

- (id)showRectForMenuController
{
    asm{ stp        d11, d10, [sp, #0xffffff80]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x28, x27, [sp, #0x20] };
    asm{ stp        x26, x25, [sp, #0x30] };
    asm{ stp        x24, x23, [sp, #0x40] };
    asm{ stp        x22, x21, [sp, #0x50] };
    asm{ stp        x20, x19, [sp, #0x60] };
    asm{ stp        x29, x30, [sp, #0x70] };
    r29 = 0x70;
    0x0 = 0x0 - 0x20;
    r19 = self;
    asm{ ldrsw      x21, [x8, #0xe64] };
    r0 = *(int32_t *)(r19 + r21);
    if (r0 != 0x0) {
            r0 = [r0 superview];
            r29 = 0x70;
            r0 = [r0 retain];
            r20 = r0;
            [r0 release];
            if (r20 != 0x0) {
                    r20 = *(int32_t *)(r19 + r21);
                    [r20 bounds];
                    [r20 convertRect:r19 toView:r3];
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    *(int32_t *)(r31 + 0x8) = r0;
                    r20 = [[r0 getValueOfProperty:@"message_node_bkg_margin_top" inRuleSet:@"#message_node_view"] retain];
                    [MMThemeUtil parseFloatFromValues:r20];
                    asm{ fadd       d10, d10, d0 };
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r25 = r0;
                    r26 = [[r0 getValueOfProperty:@"message_node_bkg_margin_top" inRuleSet:@"#message_node_view"] retain];
                    [MMThemeUtil parseFloatFromValues:r26];
                    asm{ fsub       d11, d11, d0 };
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r21 = r0;
                    r0 = [r0 getValueOfProperty:@"message_node_bkg_margin_bottom" inRuleSet:@"#message_node_view"];
                    r29 = r29;
                    r22 = [r0 retain];
                    [MMThemeUtil parseFloatFromValues:r22];
                    asm{ fsub       d11, d11, d0 };
                    [r22 release];
                    [r21 release];
                    [r26 release];
                    [r25 release];
                    [r20 release];
                    r0 = *(int32_t *)(r31 + 0x8);
                    r0 = [r0 release];
            }
            else {
                    *(int32_t *)(r31 + 0x10) = r19;
                    *(int32_t *)(r31 + 0x18) = *(int32_t *)0x1039d52a8;
                    r0 = [[0x10 super] showRectForMenuController];
            }
    }
    else {
            *(int32_t *)(r31 + 0x10) = r19;
            *(int32_t *)(r31 + 0x18) = *(int32_t *)0x1039d52a8;
            r0 = [[0x10 super] showRectForMenuController];
    }
    0x0 = r29 - 0x70;
    asm{ ldp        x29, x30, [sp, #0x70] };
    asm{ ldp        x20, x19, [sp, #0x60] };
    asm{ ldp        x22, x21, [sp, #0x50] };
    asm{ ldp        x24, x23, [sp, #0x40] };
    asm{ ldp        x26, x25, [sp, #0x30] };
    asm{ ldp        x28, x27, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x80 };
    return r0;
}

- (void)setFrameForBgImageView:(id)arg2 
{
    asm{ stp        d13, d12, [sp, #0xffffff80]! };
    asm{ stp        d11, d10, [sp, #0x10] };
    asm{ stp        d9, d8, [sp, #0x20] };
    asm{ stp        x26, x25, [sp, #0x30] };
    asm{ stp        x24, x23, [sp, #0x40] };
    asm{ stp        x22, x21, [sp, #0x50] };
    asm{ stp        x20, x19, [sp, #0x60] };
    asm{ stp        x29, x30, [sp, #0x70] };
    asm{ ldrsw      x8, [x8, #0xe68] };
    asm{ stp        d9, d10, [x8] };
    asm{ stp        d11, d8, [x8, #0x10] };
    r0 = [self viewModel];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 bgBubbleInfo];
    r0 = [r0 retain];
    r24 = r0;
    [r0 margin];
    asm{ fsub       d9, d9, d1 };
    [r24 release];
    [r23 release];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 bgBubbleInfo];
    r0 = [r0 retain];
    r24 = r0;
    [r0 margin];
    asm{ fsub       d10, d10, d0 };
    [r24 release];
    [r23 release];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 bgBubbleInfo];
    r0 = [r0 retain];
    r24 = r0;
    [r0 margin];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r25 = r0;
    r0 = [r0 bgBubbleInfo];
    r0 = [r0 retain];
    r26 = r0;
    [r0 margin];
    asm{ fadd       d0, d12, d3 };
    asm{ fadd       d11, d11, d0 };
    [r26 release];
    [r25 release];
    [r24 release];
    [r23 release];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 bgBubbleInfo];
    r0 = [r0 retain];
    r24 = r0;
    [r0 margin];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 bgBubbleInfo];
    r0 = [r0 retain];
    r21 = r0;
    [r0 margin];
    asm{ fadd       d0, d12, d2 };
    asm{ fadd       d8, d8, d0 };
    [r21 release];
    [r20 release];
    [r24 release];
    [r23 release];
    asm{ ldrsw      x22, [x8, #0xe64] };
    r0 = *(int32_t *)(self + @selector(margin));
    [r0 setFrame:arg2];
    asm{ ldrsw      x8, [x8, #0xe78] };
    r21 = *(int32_t *)(self + 0x1039ee000);
    r0 = *(int32_t *)(self + @selector(margin));
    [r0 frame];
    asm{ ldp        x29, x30, [sp, #0x70] };
    asm{ ldp        x20, x19, [sp, #0x60] };
    asm{ ldp        x22, x21, [sp, #0x50] };
    asm{ ldp        x24, x23, [sp, #0x40] };
    asm{ ldp        x26, x25, [sp, #0x30] };
    asm{ ldp        d9, d8, [sp, #0x20] };
    asm{ ldp        d11, d10, [sp, #0x10] };
    asm{ ldp        d13, d12, [sp], #0x80 };
    r0 = [r21 setFrame:arg2];
    return;
}

- (void)initCrashWarningLabel
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r29 = 0x40;
    r19 = self;
    asm{ ldrsw      x26, [x8, #0xe84] };
    r21 = *(int32_t *)(r19 + r26);
    if (r21 != 0x0) {
            r20 = @selector(sharedThemeManager);
    }
    else {
            r0 = [CTRichTextView alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)(r19 + r26);
            *(int32_t *)(r19 + r26) = r0;
            [r8 release];
            r0 = *(int32_t *)(r19 + r26);
            asm{ movz       w2, #0x0 };
            [r0 setUserInteractionEnabled:r2];
            r20 = *(int32_t *)(r19 + r26);
            r21 = [[UIFont systemFont] retain];
            [r20 setFont:r21];
            [r21 release];
            r22 = *(int32_t *)(r19 + r26);
            r20 = @selector(sharedThemeManager);
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r21 = r0;
            r0 = [r0 colorList];
            r0 = [r0 retain];
            r23 = r0;
            r0 = [r0 getColorByName:@"cpcolor_for_messagewrap"];
            r29 = 0x40;
            r24 = [[r0 retain] retain];
            if (r24 != 0x0) {
                    r0 = [r24 retain];
            }
            else {
                    r0 = [UIColor clearColor];
                    r29 = r29;
                    r0 = [r0 retain];
            }
            r25 = r0;
            [r24 release];
            [r22 setTextColor:r25];
            [r25 release];
            [r24 release];
            [r23 release];
            [r21 release];
            r21 = *(int32_t *)(r19 + r26);
    }
    asm{ nop         };
    r0 = objc_msgSend(MMThemeManager, r20);
    r0 = [r0 retain];
    r20 = r0;
    r23 = [[r0 getValueOfProperty:@"text_message_node_width" inRuleSet:@"#message_node_view"] retain];
    [MMThemeUtil parseFloatFromValues:r23];
    [r21 setFWidth:r23];
    [r23 release];
    [r20 release];
    r20 = *(int32_t *)(r19 + r26);
    r21 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r21 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 getStringForCurLanguage:0x103340000 defaultTo:@"CrashProtected_WordingForMessageWrap"];
    r23 = [r0 retain];
    [r20 setContent:r23];
    [r23 release];
    [r22 release];
    [r21 release];
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x6b4] };
    r0 = *(int32_t *)(r19 + 0x1039ea000);
    r2 = *(int32_t *)(r19 + r26);
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r0 addSubview:r2];
    return;
}

- (void)initHeadImageView
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    r29 = 0x60;
    0x0 = 0x0 - 0x10;
    r19 = self;
    r0 = r19->m_headImageView;
    if (r0 == 0x0) {
            asm{ sxtw       x22, w20 };
            r0 = [MMHeadImageView alloc];
            asm{ movz       x2, #0x0 };
            asm{ movz       x3, #0x0 };
            r0 = [r0 initWithUsrName:r2 headImgUrl:r3 bAutoUpdate:STK0 bRoundCorner:STK-1];
            r8 = *(int32_t *)(r19 + r22);
            *(int32_t *)(r19 + r22) = r0;
            [r8 release];
            *(int32_t *)r31 = *(int32_t *)(r19 + r22);
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            *(int32_t *)(r31 + 0x8) = r0;
            r20 = [[r0 getValueOfProperty:@"text_message_margin_top" inRuleSet:@"#message_node_view"] retain];
            [MMThemeUtil parseFloatFromValues:r20];
            asm{ fadd       d8, d0, d0 };
            r0 = [UIFont systemFont];
            r0 = [r0 retain];
            r23 = r0;
            [r0 lineHeight];
            asm{ frintp     d0, d0 };
            asm{ fadd       d8, d8, d0 };
            r27 = MMThemeUtil;
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r24 = r0;
            r25 = [[r0 getValueOfProperty:@"text_message_margin_top" inRuleSet:@"#message_node_view"] retain];
            [r27 parseFloatFromValues:r25];
            asm{ fadd       d9, d0, d0 };
            r0 = [UIFont systemFont];
            r0 = [r0 retain];
            r21 = r0;
            [r0 lineHeight];
            asm{ frintp     d0, d0 };
            asm{ fadd       d1, d9, d0 };
            r0 = *(int32_t *)r31;
            [r0 setSize:r25];
            [r21 release];
            [r25 release];
            [r24 release];
            [r23 release];
            [r20 release];
            r0 = *(int32_t *)(r31 + 0x8);
            [r0 release];
            r0 = *(int32_t *)(r19 + r22);
            asm{ movz       w2, #0x5 };
            [r0 setHeadUseScene:r25];
            r20 = *(int32_t *)(r19 + r22);
            [r20 size];
            [r20 setImageSize:r25];
            r0 = *(int32_t *)(r19 + r22);
            r0 = [r0 layer];
            r0 = [r0 retain];
            r21 = r0;
            asm{ fmov       d0, #0x0 };
            [r0 setBorderWidth:r25];
            [r21 release];
            r20 = [[*(int32_t *)(r19 + r22) layer] retain];
            r0 = [UIColor colorWithRed:r25 green:@"#message_node_view" blue:STK0 alpha:STK-1];
            r29 = 0x60;
            r0 = [r0 retain];
            r0 = objc_retainAutorelease(r0);
            r21 = r0;
            r2 = [r0 CGColor];
            [r20 setBorderColor:r2];
            [r21 release];
            [r20 release];
            r0 = *(int32_t *)(r19 + r22);
            [r0 setTarget:r19 action:@selector(onHeadImageClicked:)];
            asm{ ldrsw      x20, [x8, #0xe5c] };
            r0 = *(int32_t *)(r19 + r20);
            [r0 setTargetForLongPress:r19 action:@selector(onHeadImageLongPressed:)];
            r0 = *(int32_t *)(r19 + r20);
    }
    asm{ sxtw       x27, w20 };
    r2 = 0x1000;
    r20 = [[r0 viewWithTag:r2] retain];
    r21 = @selector(viewModel);
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r24 = [r0 watchMsgSourceType];
    [r0 release];
    [r22 release];
    if (r24 != 0x0) {
            if (r20 == 0x0) {
                    r22 = [UIImageView alloc];
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r23 = r0;
                    r0 = [r0 imageNamed:@"watch-sentfromwatch"];
                    r29 = r29;
                    r24 = [r0 retain];
                    r22 = [r22 initWithImage:r24];
                    [r20 release];
                    [r24 release];
                    [r23 release];
                    [r22 setTag:0x1000];
                    r0 = *(int32_t *)(r19 + r27);
                    [r0 height];
                    [r22 setBottom:0x1000];
                    r0 = *(int32_t *)(r19 + r27);
                    r2 = r22;
                    [r0 addSubview:r2];
                    r20 = r22;
            }
            r0 = [r19 viewModel];
            r29 = r29;
            r0 = [r0 retain];
            r23 = [r0 isSender];
            [r0 release];
            if (r23 != 0x0) {
                    asm{ movi.16b   v0, #0x0 };
                    [r20 setLeft:r2];
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r22 = r0;
                    r0 = [r0 imageNamed:@"watch-sentfromwatch-self"];
                    r29 = r29;
            }
            else {
                    r0 = *(int32_t *)(r19 + r27);
                    [r0 width];
                    [r20 setRight:r2];
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r22 = r0;
                    r0 = [r0 imageNamed:@"watch-sentfromwatch"];
                    r29 = r29;
            }
            r23 = [r0 retain];
            [r20 setImage:r23];
            [r23 release];
            [r22 release];
    }
    else {
            [r20 removeFromSuperview];
    }
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r24 = r0;
    r23 = @selector(contact);
    r0 = [r0 contact];
    r0 = [r0 retain];
    r22 = [[r0 m_nsHeadImgUrl] retain];
    [r0 release];
    [r24 release];
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r24 = r0;
    r0 = [r0 contact];
    r29 = r29;
    r25 = [r0 retain];
    r2 = [CEnterpriseContact class];
    r8 = 0x103951000;
    r26 = [r25 isKindOfClass:r2];
    [r25 release];
    [r24 release];
    if (r26 != 0x0) {
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r25 = [[r0 contact] retain];
            [r0 release];
            r8 = 0x103952000;
            r0 = [r25 m_nsHeadHDImgUrl];
            r29 = r29;
            r24 = [r0 retain];
            [r22 release];
            [r25 release];
            asm{ movz       w8, #0x5 };
            r22 = r24;
    }
    else {
            asm{ movz       w8, #0x0 };
    }
    r0 = *(int32_t *)(r19 + r27);
    [r0 setHeadCategory:r8 & 0xff];
    r24 = *(int32_t *)(r19 + r27);
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 contact];
    r0 = [r0 retain];
    r23 = r0;
    r25 = [[r0 m_nsUsrName] retain];
    [r24 updateUsrName:r25 withHeadImgUrl:r22];
    [r25 release];
    [r23 release];
    [r21 release];
    r2 = *(int32_t *)(r19 + r27);
    [r19 addSubview:r2];
    [r22 release];
    0x0 = r29 - 0x60;
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        x26, x25, [sp, #0x20] };
    asm{ ldp        x28, x27, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x70 };
    r0 = [r20 release];
    return;
}

- (void)initChatRoomNameLabel
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    r29 = 0x60;
    0x0 = 0x0 - 0x10;
    r19 = self;
    asm{ ldrsw      x27, [x8, #0xe60] };
    if (*(int32_t *)(r19 + r27) == 0x0) {
            r20 = [MMCPLabel alloc];
            [UiUtil screenWidthCurOri];
            asm{ fmov       d0, #0x10 };
            [UIFont dynamicLength:r2];
            asm{ movi.16b   v0, #0x0 };
            asm{ movi.16b   v1, #0x0 };
            r0 = [r20 initWithFrame:r2];
            r8 = *(int32_t *)(r19 + r27);
            *(int32_t *)(r19 + r27) = r0;
            [r8 release];
            r20 = *(int32_t *)(r19 + r27);
            asm{ fmov       d0, #0xc };
            r21 = [[UIFont dynamicSystemFontOfSize:r2] retain];
            [r20 setFont:r21];
            [r21 release];
            r21 = *(int32_t *)(r19 + r27);
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 colorList];
            r0 = [r0 retain];
            r22 = r0;
            asm{ fmov       d0, #0x0 };
            r0 = [r0 getColorByName:@"white" withAlpha:r3];
            r29 = 0x60;
            r23 = [[r0 retain] retain];
            if (r23 != 0x0) {
                    r0 = [r23 retain];
            }
            else {
                    r0 = [UIColor clearColor];
                    r29 = r29;
                    r0 = [r0 retain];
            }
            r24 = r0;
            [r23 release];
            [r21 setShadowColor:r24];
            [r24 release];
            [r23 release];
            [r22 release];
            [r20 release];
            r0 = *(int32_t *)(r19 + r27);
            asm{ fmov       d0, #0x1 };
            asm{ movi.16b   v1, #0x0 };
            [r0 setShadowOffset:r24];
    }
    r20 = @selector(viewModel);
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r22 = r0;
    r21 = @selector(cpKeyForChatRoomDisplayName);
    r23 = [[r0 cpKeyForChatRoomDisplayName] retain];
    sub_1028a5014(0x8, r23);
    [r23 release];
    [r22 release];
    r0 = [r19 viewModel];
    r29 = r29;
    r0 = [r0 retain];
    r23 = [r0 isChatRoomDisplayNameUnsafe];
    [r0 release];
    r22 = *(int32_t *)(r19 + r27);
    if (r23 != 0x0) {
            r23 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMLanguageMgr class];
            r0 = [r23 getService:r2];
            r0 = [r0 retain];
            r24 = r0;
            r25 = [[r0 getStringForCurLanguage:0x1032f3000 defaultTo:@"CrashProtected_WordingForNickname"] retain];
            [r22 setText:r25];
            [r25 release];
            [r24 release];
            [r23 release];
            r23 = *(int32_t *)(r19 + r27);
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 colorList];
            r0 = [r0 retain];
            r24 = r0;
            r0 = [r0 getColorByName:@"cpcolor_for_nickname"];
            r29 = r29;
            r25 = [[r0 retain] retain];
            if (r25 == 0x0) {
                    r0 = [UIColor clearColor];
                    r29 = r29;
                    r0 = [r0 retain];
            }
            else {
                    r0 = [r25 retain];
            }
    }
    else {
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r23 = r0;
            r24 = [[r0 chatRoomDisplayName] retain];
            [r22 setText:r24];
            [r24 release];
            [r23 release];
            r23 = *(int32_t *)(r19 + r27);
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 colorList];
            r0 = [r0 retain];
            r24 = r0;
            r0 = [r0 getColorByName:@"#737373"];
            r29 = r29;
            r25 = [[r0 retain] retain];
            if (r25 != 0x0) {
                    r0 = [r25 retain];
            }
            else {
                    r0 = [UIColor clearColor];
                    r29 = r29;
                    r0 = [r0 retain];
            }
    }
    r26 = r0;
    [r25 release];
    [r23 setTextColor:r26];
    [r26 release];
    [r25 release];
    [r24 release];
    [r22 release];
    r22 = *(int32_t *)(r19 + r27);
    [UiUtil screenWidthCurOri];
    asm{ fadd       d8, d0, d1 };
    [UIFont dynamicLength:r26];
    asm{ fcmp       d8, d0 };
    asm{ fcsel      d0, d8, d0, mi };
    [r22 setWidth:r26];
    r22 = *(int32_t *)(r19 + r27);
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r20 = r0;
    r21 = [[r0 cpKeyForChatRoomDisplayName] retain];
    [r22 setCpKey:r21];
    [r21 release];
    [r20 release];
    r2 = *(int32_t *)(r19 + r27);
    [r19 addSubview:r2];
    r0 = sub_1028a50bc(0x8);
    0x0 = r29 - 0x60;
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        x26, x25, [sp, #0x20] };
    asm{ ldp        x28, x27, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x70 };
    return;
}

- (void)initBgImageView
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    0x0 = 0x0 - 0x60;
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xe64] };
    r23 = r19 + 0x1039ee000;
    r8 = *(int32_t *)r23;
    asm{ movz       w24, #0xc200, lsl #16 };
    if (r8 == 0x0) {
            r0 = [YYAsyncImageView alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)r23;
            *(int32_t *)r23 = r0;
            [r8 release];
            r0 = *(int32_t *)r23;
            [r0 setUserInteractionEnabled:0x1];
    }
    objc_initWeak(0x40 - 0x48, r19);
    r20 = *(int32_t *)r23;
    r26 = *(int32_t *)_NSConcreteStackBlock;
    *(int32_t *)(r31 + 0x30) = r26;
    asm{ stp        w24, wzr, [sp, #0x38] };
    asm{ nop         };
    *(int32_t *)(r31 + 0x40) = 0x10247ac60;
    *(int32_t *)(r31 + 0x48) = 0x10322a4d0;
    objc_copyWeak(0x50, 0x40 - 0x48);
    r21 = [[YYImage imageWithBlock:0x30] retain];
    [r20 setImage:r21];
    [r21 release];
    r21 = *(int32_t *)r23;
    *(int32_t *)(r31 + 0x8) = r26;
    asm{ stp        w24, wzr, [sp, #0x10] };
    asm{ nop         };
    *(int32_t *)(r31 + 0x18) = 0x10247ad08;
    *(int32_t *)(r31 + 0x20) = 0x10322a500;
    objc_copyWeak(0x28, 0x40 - 0x48);
    r22 = [[YYImage imageWithBlock:0x8] retain];
    [r21 setHighlightedImage:r22];
    [r22 release];
    objc_destroyWeak(0x28);
    objc_destroyWeak(0x50);
    r0 = objc_destroyWeak(0x40 - 0x48);
    0x0 = 0x40 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    return;
}

- (void)initMaskImageView
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x30;
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xe78] };
    r20 = r19 + 0x1039ee000;
    r0 = *(int32_t *)r20;
    if (r0 == 0x0) {
            r0 = [YYAsyncImageView alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)r20;
            *(int32_t *)r20 = r0;
            [r8 release];
            r0 = *(int32_t *)r20;
    }
    [r0 setHidden:0x1];
    objc_initWeak(0x28, r19);
    r20 = *(int32_t *)r20;
    *(int32_t *)r31 = *(int32_t *)_NSConcreteStackBlock;
    asm{ movz       w8, #0xc200, lsl #16 };
    asm{ stp        w8, wzr, [sp, #0x8] };
    asm{ nop         };
    *(int32_t *)(r31 + 0x10) = 0x10247aed8;
    *(int32_t *)(r31 + 0x18) = 0x10322a530;
    objc_copyWeak(0x20, 0x28);
    r21 = [[YYImage imageWithBlock:0x0] retain];
    [r20 setImage:r21];
    [r21 release];
    objc_destroyWeak(0x20);
    r0 = objc_destroyWeak(0x28);
    0x0 = 0x20 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (void)addSendingView
{
    asm{ stp        d9, d8, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    asm{ ldrsw      x21, [x8, #0xe7c] };
    r0 = *(int32_t *)(r19 + r21);
    if (r0 == 0x0) {
            r0 = [UIActivityIndicatorView alloc];
            r0 = [r0 initWithActivityIndicatorStyle:0x2];
            r8 = *(int32_t *)(r19 + r21);
            *(int32_t *)(r19 + r21) = r0;
            [r8 release];
            r0 = *(int32_t *)(r19 + r21);
            [r0 setHidesWhenStopped:0x1];
            r0 = *(int32_t *)(r19 + r21);
    }
    [r0 startAnimating];
    r2 = *(int32_t *)(r19 + r21);
    asm{ nop         };
    asm{ ldrsw      x22, [x8, #0x6b4] };
    r3 = *(int32_t *)(r19 + r22);
    [r19 insertSubview:r2 belowSubview:r3];
    r20 = *(int32_t *)(r19 + r21);
    r0 = *(int32_t *)(r19 + r22);
    [r0 left];
    asm{ fmov       d1, #0xfffffffffffffffa };
    asm{ fadd       d8, d0, d1 };
    r0 = *(int32_t *)(r19 + r21);
    [r0 width];
    asm{ fmov       d1, #0x0 };
    asm{ fmul       d0, d0, d1 };
    asm{ fadd       d8, d8, d0 };
    [r19 contentViewCenterY];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x40 };
    r0 = [r20 setCenter:r2];
    return;
}

- (void)addSendFailButton
{
    asm{ stp        d9, d8, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    r19 = self;
    *(int32_t *)(r31 + 0xfffffffffffffff0) = @"add send fail button";
    asm{ movz       w6, #0x16a };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x4 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    asm{ ldrsw      x8, [x8, #0xe80] };
    r25 = r19 + 0x1039ee000;
    r2 = *(int32_t *)r25;
    if (r2 == 0x0) {
            r0 = [UIButton alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)r25;
            *(int32_t *)r25 = r0;
            [r8 release];
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r20 = [[r0 imageNamed:@"MessageSendFail.png"] retain];
            [r0 release];
            r0 = *(int32_t *)r25;
            asm{ movz       x3, #0x0 };
            [r0 setImage:r20 forState:r3];
            r24 = *(int32_t *)r25;
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r21 = r0;
            r0 = [r0 imageNamed:@"MessageSendFail_HL.png"];
            r29 = 0x50;
            r23 = [r0 retain];
            [r24 setImage:r23 forState:0x1];
            [r23 release];
            [r21 release];
            r0 = *(int32_t *)r25;
            [r0 addTarget:r19 action:@selector(onSendFailButtonClicked:) forControlEvents:STK-1];
            r21 = *(int32_t *)r25;
            [r20 size];
            [r21 setSize:r19];
            [r20 release];
            r2 = *(int32_t *)r25;
    }
    [r19 addSubview:r2];
    asm{ nop         };
    r20 = *(int32_t *)r25;
    asm{ ldrsw      x8, [x8, #0x6b4] };
    r0 = *(int32_t *)(r19 + 0x1039ea000);
    [r0 left];
    asm{ fmov       d1, #0xfffffffffffffffa };
    asm{ fadd       d8, d0, d1 };
    r0 = *(int32_t *)r25;
    [r0 width];
    asm{ fmov       d1, #0x0 };
    asm{ fmul       d0, d0, d1 };
    asm{ fadd       d8, d8, d0 };
    [r19 contentViewCenterY];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x60 };
    r0 = [r20 setCenter:r2];
    return;
}

- (void)addCancelButton
{
    asm{ stp        d9, d8, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    r19 = self;
    asm{ ldrsw      x25, [x8, #0xe88] };
    r2 = *(int32_t *)(r19 + r25);
    if (r2 == 0x0) {
            r0 = [UIButton alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)(r19 + r25);
            *(int32_t *)(r19 + r25) = r0;
            [r8 release];
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r20 = [[r0 imageNamed:@"MessageSendCancel.png"] retain];
            [r0 release];
            r0 = *(int32_t *)(r19 + r25);
            asm{ movz       x3, #0x0 };
            [r0 setImage:r20 forState:r3];
            r24 = *(int32_t *)(r19 + r25);
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r21 = r0;
            r0 = [r0 imageNamed:@"MessageSendCancel_HL.png"];
            r29 = 0x50;
            r23 = [r0 retain];
            [r24 setImage:r23 forState:0x1];
            [r23 release];
            [r21 release];
            r0 = *(int32_t *)(r19 + r25);
            [r0 addTarget:r19 action:@selector(onCancelButtonClicked:) forControlEvents:STK-1];
            r21 = *(int32_t *)(r19 + r25);
            [r20 size];
            [r21 setSize:r19];
            [r20 release];
            r2 = *(int32_t *)(r19 + r25);
    }
    [r19 addSubview:r2];
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r21 = [r0 isSender];
    [r0 release];
    r20 = *(int32_t *)(r19 + r25);
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x6b4] };
    r0 = *(int32_t *)(r19 + 0x1039ea000);
    if (r21 != 0x0) {
            [r0 left];
            asm{ fmov       d1, #0xfffffffffffffffa };
            asm{ fadd       d8, d0, d1 };
            r0 = *(int32_t *)(r19 + r25);
            [r0 width];
            asm{ fmov       d1, #0x0 };
    }
    else {
            [r0 right];
            asm{ fmov       d1, #0x6 };
            asm{ fadd       d8, d0, d1 };
            r0 = *(int32_t *)(r19 + r25);
            [r0 width];
            asm{ fmov       d1, #0x0 };
    }
    asm{ fmul       d0, d0, d1 };
    asm{ fadd       d8, d8, d0 };
    [r19 contentViewCenterY];
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x60 };
    r0 = [r20 setCenter:r2];
    return;
}

- (void)initSourceViewBottom
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0x20;
    r24 = self;
    r21 = @selector(defaultCenter);
    r22 = [[MMServiceCenter defaultCenter] retain];
    r26 = @selector(class);
    [MMExtensionCenter class];
    r27 = @selector(getService:);
    r0 = [r22 getService:r2];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 getExtension:@protocol(IAppDataExt)];
    r20 = [r0 retain];
    [r23 release];
    [r22 release];
    if (r20 != 0x0) {
            [r20 registerExtension:r24];
    }
    [r20 release];
    r0 = [UIButton alloc];
    r20 = [r0 init];
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r28 = r0;
    *(int32_t *)(r31 + 0x10) = @selector(imageNamed:);
    r0 = [r0 imageNamed:@"sharemore_fromapp.png"];
    r0 = [r0 retain];
    r22 = r0;
    *(int32_t *)(r31 + 0x18) = @selector(stretchableImageWithLeftCapWidth:topCapHeight:);
    r3 = 0x8;
    r23 = [[r0 stretchableImageWithLeftCapWidth:0x10 topCapHeight:r3] retain];
    *(int32_t *)(r31 + 0x8) = @selector(setBackgroundImage:forState:);
    asm{ movz       x3, #0x0 };
    [r20 setBackgroundImage:r23 forState:r3];
    [r23 release];
    [r22 release];
    [r28 release];
    r28 = [[MMServiceCenter defaultCenter] retain];
    [OpenApiMgr class];
    r22 = [[r28 getService:r2] retain];
    r19 = @selector(viewModel);
    r0 = [r24 viewModel];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 m_nsAppID];
    r29 = 0x60;
    r27 = [r0 retain];
    r2 = r27;
    r21 = [r22 isCanJumpWithAppId:r2];
    [r27 release];
    [r26 release];
    [r23 release];
    [r22 release];
    r27 = r24;
    r24 = @selector(sharedThemeManager);
    [r28 release];
    if (r21 != 0x0) {
            r0 = *(int32_t *)(0x1039c3000 + 0x3c8);
            r0 = [r0 sharedThemeManager];
            r0 = [r0 retain];
            r21 = r0;
            r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x10));
            r0 = [r0 retain];
            r22 = r0;
            r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x18));
            r29 = r29;
            r23 = [r0 retain];
            r1 = *(int32_t *)(r31 + 0x8);
            objc_msgSend(r20, r1);
            [r23 release];
            [r22 release];
            [r21 release];
            r3 = @selector(onAppButtonClicked:);
            r2 = r27;
            [r20 addTarget:r2 action:r3 forControlEvents:STK-1];
    }
    r23 = @selector(titleLabel);
    r21 = [[r20 titleLabel] retain];
    asm{ fmov       d0, #0xc };
    r22 = [[UIFont systemFontOfSize:r2] retain];
    [r21 setFont:r22];
    [r22 release];
    [r21 release];
    r0 = [r27 viewModel];
    r0 = [r0 retain];
    r21 = r0;
    r22 = [[r0 sourceTitle] retain];
    asm{ movz       x3, #0x0 };
    [r20 setTitle:r22 forState:r3];
    [r22 release];
    [r21 release];
    r0 = *(int32_t *)(0x1039c3000 + 0x3c8);
    r0 = [r0 sharedThemeManager];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 colorList];
    r0 = [r0 retain];
    r24 = r0;
    r0 = [r0 getColorByName:@"message_time_text_color"];
    r29 = r29;
    r25 = [[r0 retain] retain];
    if (r25 != 0x0) {
            r0 = [r25 retain];
    }
    else {
            r0 = [UIColor clearColor];
            r29 = r29;
            r0 = [r0 retain];
    }
    r26 = r0;
    [r25 release];
    asm{ movz       x3, #0x0 };
    r2 = r26;
    [r20 setTitleColor:r2 forState:r3];
    [r26 release];
    [r25 release];
    [r24 release];
    [r22 release];
    r0 = [r27 viewModel];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 sourceIcon];
    r29 = r29;
    r21 = [r0 retain];
    [r22 release];
    if (r21 != 0x0) {
            asm{ movz       x3, #0x0 };
            [r20 setImage:r21 forState:r3];
            r0 = [r20 imageView];
            r29 = r29;
            r0 = [r0 retain];
            r22 = r0;
            r2 = 0x1;
            [r0 setContentMode:r2];
            [r22 release];
            asm{ fmov       d8, #0x5 };
            asm{ fmov       d1, #0xfffffffffffffffb };
            [r20 setImageEdgeInsets:r2];
            asm{ fmov       d1, #0xfffffffffffffff8 };
            asm{ fmov       d0, #0x3 };
            [r20 setTitleEdgeInsets:r2];
    }
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x6b4] };
    r0 = *(int32_t *)(r27 + 0x1039ea000);
    [r0 width];
    asm{ fmov       d1, #0x19 };
    asm{ fadd       d8, d0, d1 };
    asm{ movz       x2, #0x0 };
    r24 = [[r20 titleForState:r2] retain];
    r0 = [r20 titleLabel];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 font];
    r29 = r29;
    r25 = [r0 retain];
    r2 = r24;
    [CControlUtil labelWidth:r2 maxWidth:r25 font:STK-1];
    [r25 release];
    [r23 release];
    [r24 release];
    if (r21 != 0x0) {
            [r21 size];
    }
    else {
            asm{ fmov       d0, #0xa };
    }
    asm{ fadd       d2, d8, d0 };
    asm{ fmov       d3, #0x17 };
    asm{ movi.16b   v0, #0x0 };
    asm{ movi.16b   v1, #0x0 };
    [r20 setFrame:r2];
    asm{ ldrsw      x23, [x8, #0xe70] };
    r22 = *(int32_t *)(r27 + r23);
    *(int32_t *)(r27 + r23) = r20;
    r20 = [r20 retain];
    [r22 release];
    r2 = *(int32_t *)(r27 + r23);
    [r27 addSubview:r2];
    [r20 release];
    0x0 = r29 - 0x60;
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        x26, x25, [sp, #0x20] };
    asm{ ldp        x28, x27, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x70 };
    r0 = [r21 release];
    return;
}

- (void)initSourceViewInside
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0x20;
    r19 = self;
    r20 = @selector(viewModel);
    r0 = [self viewModel];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r23 = r0;
    r24 = [[r0 m_nsSourceUsername] retain];
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r25 = r0;
    r27 = [[r0 m_nsSourceDisplayname] retain];
    asm{ stp        x24, x27, [sp, #0x8] };
    *(int32_t *)r31 = @"initSourceViewInside %@ %@";
    asm{ movz       w6, #0x1b3 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    [r27 release];
    [r25 release];
    [r26 release];
    [r24 release];
    [r23 release];
    [r21 release];
    r22 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMExtensionCenter class];
    r0 = [r22 getService:r2];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 getExtension:@protocol(IAppDataExt)];
    r21 = [r0 retain];
    [r23 release];
    [r22 release];
    if (r21 != 0x0) {
            [r21 registerExtension:r19];
    }
    [r21 release];
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r21 = r0;
    r22 = [[r0 sourceTitle] retain];
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r24 = r0;
    r25 = [[r0 sourceIcon] retain];
    asm{ ldrsw      x8, [x8, #0xe68] };
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r20 = r0;
    r26 = [[r0 sourceTag] retain];
    r0 = [MessageNodeComponentHelper getSourceViewWithTitle:r22 iconImage:r25 maxWidth:STK1 withBkgImg:STK0 withTailTag:STK-1];
    r0 = [r0 retain];
    asm{ ldrsw      x23, [x8, #0xe6c] };
    r8 = *(int32_t *)(r19 + MessageNodeComponentHelper);
    *(int32_t *)(r19 + MessageNodeComponentHelper) = r0;
    [r8 release];
    [r26 release];
    [r20 release];
    [r25 release];
    [r24 release];
    [r22 release];
    [r21 release];
    asm{ ldrsw      x21, [x8, #0xe78] };
    r0 = *(int32_t *)(r19 + r21);
    r0 = [r0 superview];
    r29 = 0x60;
    r0 = [r0 retain];
    r20 = r0;
    asm{ nop         };
    asm{ ldrsw      x22, [x8, #0x6b4] };
    r24 = *(int32_t *)(r19 + r22);
    [r0 release];
    r0 = *(int32_t *)(r19 + r22);
    r2 = *(int32_t *)(r19 + MessageNodeComponentHelper);
    if (r20 != r24) {
            0x0 = r29 - 0x60;
            asm{ ldp        x29, x30, [sp, #0x60] };
            asm{ ldp        x20, x19, [sp, #0x50] };
            asm{ ldp        x22, x21, [sp, #0x40] };
            asm{ ldp        x24, x23, [sp, #0x30] };
            asm{ ldp        x26, x25, [sp, #0x20] };
            asm{ ldp        x28, x27, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x70 };
            r0 = [r0 addSubview:r2];
    }
    else {
            r3 = *(int32_t *)(r19 + r21);
            0x0 = r29 - 0x60;
            asm{ ldp        x29, x30, [sp, #0x60] };
            asm{ ldp        x20, x19, [sp, #0x50] };
            asm{ ldp        x22, x21, [sp, #0x40] };
            asm{ ldp        x24, x23, [sp, #0x30] };
            asm{ ldp        x26, x25, [sp, #0x20] };
            asm{ ldp        x28, x27, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x70 };
            r0 = [r0 insertSubview:r2 belowSubview:r3];
    }
    return;
}

- (void)initAppMessageBlockButton
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    asm{ ldrsw      x23, [x8, #0xe74] };
    r20 = *(int32_t *)(r19 + r23);
    if (r20 == 0x0) {
            r0 = [AppMessageBlockButton alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)(r19 + r23);
            *(int32_t *)(r19 + r23) = r0;
            [r8 release];
            r20 = *(int32_t *)(r19 + r23);
    }
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 messageWrap];
    r22 = [r0 retain];
    [r20 setMessageWrap:r22];
    [r22 release];
    [r21 release];
    r2 = *(int32_t *)(r19 + r23);
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 addSubview:r2];
    return;
}

- (void)setHighlighted:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    *(int32_t *)(r31 + 0xfffffffffffffff0) = self;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d52a8;
    [[0x0 super] setHighlighted:r2];
    asm{ ldrsw      x8, [x8, #0xe64] };
    r0 = *(int32_t *)(self + 0x1039ee000);
    [r0 setHighlighted:arg2];
    asm{ ldrsw      x8, [x8, #0xe78] };
    r0 = *(int32_t *)(self + 0x1039ee000);
    r0 = [r0 setHidden:arg2 ^ 0x1];
    0x0 = 0x20 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (void)layoutForCrashWarning
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0x30;
    asm{ ldrsw      x8, [x8, #0xe84] };
    *(int32_t *)(r31 + 0x28) = 0x1039ee000;
    *(int32_t *)(r31 + 0x20) = *(int32_t *)(self + 0x1039ee000);
    asm{ nop         };
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r24 = r0;
    r27 = [[r0 getValueOfProperty:@"message_node_content_margin_left" inRuleSet:@"#message_node_view"] retain];
    [MMThemeUtil parseFloatFromValues:r27];
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r28 = r0;
    r26 = [[r0 getValueOfProperty:@"text_message_margin_top" inRuleSet:@"#message_node_view"] retain];
    [MMThemeUtil parseFloatFromValues:r26];
    r0 = *(int32_t *)(r31 + 0x20);
    [r0 setOrigin:r26];
    [r26 release];
    [r28 release];
    [r27 release];
    [r24 release];
    [self initBgImageView];
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x6b4] };
    *(int32_t *)(r31 + 0x18) = 0x1039ea000;
    r0 = *(int32_t *)(self + 0x1039ea000);
    asm{ ldrsw      x8, [x8, #0xe64] };
    r2 = *(int32_t *)(self + 0x1039ee000);
    [r0 addSubview:r2];
    r0 = *(int32_t *)(self + 0x1039ea000);
    r28 = *(int32_t *)(r31 + 0x28);
    [r0 addSubview:*(int32_t *)(self + r28)];
    *(int32_t *)(r31 + 0x10) = *(int32_t *)(self + 0x1039ea000);
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x20) = r0;
    r0 = [r0 getValueOfProperty:@"message_node_content_margin_left" inRuleSet:@"#message_node_view"];
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x8) = r0;
    [MMThemeUtil parseFloatFromValues:r0];
    r0 = *(int32_t *)(self + r28);
    [r0 width];
    asm{ fadd       d8, d8, d0 };
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    *(int32_t *)r31 = r0;
    r26 = [[r0 getValueOfProperty:@"message_node_content_margin_left" inRuleSet:@"#message_node_view"] retain];
    [MMThemeUtil parseFloatFromValues:r26];
    asm{ fadd       d8, d8, d0 };
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r28 = r0;
    r22 = [[r0 getValueOfProperty:@"text_message_margin_top" inRuleSet:@"#message_node_view"] retain];
    [MMThemeUtil parseFloatFromValues:r22];
    r0 = *(int32_t *)(self + *(int32_t *)(r31 + 0x28));
    [r0 height];
    asm{ fadd       d9, d9, d0 };
    asm{ nop         };
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r20 = r0;
    r21 = [[r0 getValueOfProperty:@"text_message_margin_top" inRuleSet:@"#message_node_view"] retain];
    [MMThemeUtil parseFloatFromValues:r21];
    asm{ fadd       d1, d9, d0 };
    r0 = *(int32_t *)(r31 + 0x10);
    [r0 setSize:r21];
    [r21 release];
    [r20 release];
    [r22 release];
    [r28 release];
    [r26 release];
    r0 = *(int32_t *)r31;
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x8);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x20);
    [r0 release];
    r0 = *(int32_t *)(self + *(int32_t *)(r31 + 0x18));
    [r0 bounds];
    0x0 = 0x60 - 0x60;
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        x26, x25, [sp, #0x20] };
    asm{ ldp        x28, x27, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x70 };
    r0 = [self setFrameForBgImageView:r21];
    return;
}

- (void)onHeadImageClicked:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r20 = self;
    r19 = [arg2 retain];
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x6c4] };
    if (*(int8_t *)(r20 + 0x1039ea000) != 0x0) {
            asm{ movz       x4, #0x0 };
            [NSObject safeCancelPreviousPerformRequestsWithTarget:r20 selector:@selector(onHeadImageLongPressed:) object:STK-1];
    }
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x354] };
    r22 = r20 + 0x1039ea000;
    r23 = objc_loadWeakRetained(r22);
    if (r23 != 0x0) {
            r0 = objc_loadWeakRetained(r22);
            r21 = @selector(headerImageClicked:);
            r25 = [r0 respondsToSelector:r21];
            [r0 release];
            [r23 release];
            if (r25 != 0x0) {
                    r22 = objc_loadWeakRetained(r22);
                    r0 = [r20 viewModel];
                    r0 = [r0 retain];
                    r20 = r0;
                    r0 = [r0 contact];
                    r23 = [r0 retain];
                    [r22 headerImageClicked:r2];
                    [r23 release];
                    [r20 release];
                    [r22 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)onHeadImageLongPressed:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x354] };
    r21 = r20 + 0x1039ea000;
    r0 = objc_loadWeakRetained(r21);
    r22 = r0;
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r19 = @selector(longPressOnHeadImage:);
            r24 = [r0 respondsToSelector:r19];
            [r0 release];
            r0 = [r22 release];
            if (r24 != 0x0) {
                    r21 = objc_loadWeakRetained(r21);
                    r0 = [r20 viewModel];
                    r0 = [r0 retain];
                    r20 = r0;
                    r0 = [r0 contact];
                    r22 = [r0 retain];
                    [r21 longPressOnHeadImage:r2];
                    [r22 release];
                    [r20 release];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r21 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)onSendFailButtonClicked:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x354] };
    r20 = r19 + 0x1039ea000;
    r0 = objc_loadWeakRetained(r20);
    r22 = r0;
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r21 = @selector(tapStatus_NodeView:);
            r24 = [r0 respondsToSelector:r21];
            [r0 release];
            r0 = [r22 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r20 = r0;
                    [r0 tapStatus_NodeView:r2];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)onCancelButtonClicked:(id)arg2 
{
    r0 = self;
    return;
}

- (void)onAppButtonClicked:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x20;
    r28 = self;
    r21 = @selector(viewModel);
    r0 = [self viewModel];
    r0 = [r0 retain];
    r24 = r0;
    r23 = @selector(messageWrap);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r25 = r0;
    r19 = @selector(m_nsSourceUsername);
    r0 = [r0 m_nsSourceUsername];
    r29 = 0x50;
    r0 = [r0 retain];
    r26 = r0;
    r27 = @selector(length);
    if ([r0 length] == 0x0) goto loc_10247ca48;
    goto loc_10247c86c;

loc_10247ca48:
    r19 = r23;
    [r26 release];
    [r25 release];
    [r24 release];

loc_10247ca64:
    r22 = [[MMServiceCenter defaultCenter] retain];
    r2 = [OpenApiMgr class];
    r20 = [[r22 getService:r2] retain];
    r0 = [r28 viewModel];
    r0 = [r0 retain];
    r23 = r0;
    r27 = r19;
    r19 = r28;
    r0 = objc_msgSend(r0, r27);
    r0 = [r0 retain];
    r24 = r0;
    r0 = [r0 m_nsAppID];
    r29 = r29;
    r25 = [r0 retain];
    [r20 jumpByAppIdInMessage:r25];
    [r25 release];
    [r24 release];
    [r23 release];
    [r20 release];
    r0 = r22;

loc_10247cb40:
    [r0 release];

loc_10247cb44:
    r22 = [[MMServiceCenter defaultCenter] retain];
    r2 = [GameStatMgr class];
    r20 = [[r22 getService:r2] retain];
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r19 = r0;
    r21 = [objc_msgSend(r0, r27) retain];
    [r20 statClickInConversation:r21 isSource:0x1];
    [r21 release];
    [r19 release];
    [r20 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r22 release];
    return;

loc_10247c86c:
    *(int32_t *)(r31 + 0x18) = r19;
    r0 = objc_msgSend(r28, r21);
    r0 = [r0 retain];
    r22 = r28;
    r28 = r0;
    r19 = r23;
    r0 = objc_msgSend(r0, r23);
    r0 = [r0 retain];
    r23 = r0;
    *(int32_t *)(r31 + 0x10) = @selector(m_nsSourceDisplayname);
    r0 = [r0 m_nsSourceDisplayname];
    r29 = 0x50;
    r0 = [r0 retain];
    r27 = objc_msgSend(r0, r27);
    [r0 release];
    [r23 release];
    r0 = r28;
    r28 = r22;
    [r0 release];
    [r26 release];
    [r25 release];
    [r24 release];
    if (r27 == 0x0) goto loc_10247ca64;
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x354] };
    r24 = r28 + 0x1039ea000;
    r26 = objc_loadWeakRetained(r24);
    r27 = r19;
    r19 = r28;
    if (r26 == 0x0) goto loc_10247cb44;
    r0 = objc_loadWeakRetained(r24);
    r25 = @selector(jumpToUserProfile:Displayname:Scence:);
    r23 = [r0 respondsToSelector:r25];
    [r0 release];
    [r26 release];
    if (r23 == 0x0) goto loc_10247cb44;
    r26 = objc_loadWeakRetained(r24);
    r0 = objc_msgSend(r19, r21);
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x8) = r0;
    r0 = objc_msgSend(r0, r27);
    r0 = [r0 retain];
    r24 = r0;
    r20 = [objc_msgSend(r0, *(int32_t *)(r31 + 0x18)) retain];
    r0 = objc_msgSend(r19, r21);
    r0 = [r0 retain];
    r22 = r0;
    r0 = objc_msgSend(r0, r27);
    r0 = [r0 retain];
    r23 = r0;
    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x10));
    r29 = r29;
    r28 = [r0 retain];
    asm{ movz       w4, #0x26 };
    [r26 jumpToUserProfile:r2 Displayname:r1 Scence:r8];
    [r28 release];
    [r23 release];
    [r22 release];
    [r20 release];
    [r24 release];
    r0 = *(int32_t *)(r31 + 0x8);
    [r0 release];
    r0 = r26;
    goto loc_10247cb40;
}

- (void)triggerLongPressFor3DTouchAtLocation:(id)arg2 inCoordinateView:(id)arg3 
{
    r3 = arg3;
    asm{ stp        d9, d8, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r29 = 0x40;
    0x0 = 0x0 - 0x10;
    r20 = self;
    r19 = [arg2 retain];
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x6cc] };
    if (*(int8_t *)(r20 + 0x1039ea000) == 0x0) {
            asm{ nop         };
            asm{ ldrsw      x8, [x8, #0x6c0] };
            if (*(int8_t *)(r20 + 0x1039ea000) == 0x0) {
                    [r20 convertPoint:r19 fromView:r3];
                    r0 = [r20 forceTouchShakeView];
                    r29 = 0x40;
                    r0 = [r0 retain];
                    r22 = r0;
                    r21 = @selector(frame);
                    r0 = [r0 frame];
                    r23 = CGRectContainsPoint(r0, r21);
                    [r22 release];
                    if (r23 != 0x0) {
                            *(int32_t *)r31 = @"onLongTouchForMiss3dTouch";
                            asm{ movz       w6, #0x210 };
                            asm{ movz       x3, #0x0 };
                            asm{ movz       w4, #0x0 };
                            [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                            asm{ nop         };
                            asm{ ldrsw      x8, [x8, #0x6c4] };
                            *(int8_t *)(r20 + 0x1039ea000) = 0x1;
                            asm{ movz       x4, #0x0 };
                            [NSObject safeCancelPreviousPerformRequestsWithTarget:r20 selector:@selector(LongPressEvents) object:STK-1];
                            r22 = @selector(onTouchDown);
                            asm{ movz       x4, #0x0 };
                            [NSObject safeCancelPreviousPerformRequestsWithTarget:r20 selector:r22 object:STK-1];
                            r3 = @selector(onTouchUpInside);
                            asm{ movz       x4, #0x0 };
                            [NSObject safeCancelPreviousPerformRequestsWithTarget:r20 selector:r3 object:STK-1];
                            asm{ ldrsw      x8, [x8, #0xe5c] };
                            r0 = *(int32_t *)(r20 + 0x1039ee000);
                            r0 = [r0 frame];
                            if (CGRectContainsPoint(r0, r21) != 0x0) {
                                    asm{ movz       x3, #0x0 };
                                    [r20 safePerformSelector:@selector(onHeadImageLongPressed:) withObject:r3 afterDelay:STK-1];
                            }
                            else {
                                    [r20 onTouchDown];
                                    [r20 onLongTouch];
                            }
                    }
            }
    }
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)OnAppWatermarkChanged:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x20;
    r19 = self;
    r20 = @selector(viewModel);
    r23 = [arg2 retain];
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r24 = r0;
    r21 = @selector(messageWrap);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r25 = r0;
    r0 = [r0 m_nsAppID];
    r26 = [r0 retain];
    r22 = [arg2 isEqualToString:r26];
    [r23 release];
    [r26 release];
    [r25 release];
    r0 = [r24 release];
    if (r22 != 0x0) {
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r24 = r0;
            r25 = [[r0 m_nsSourceUsername] retain];
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r26 = r0;
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r21 = r0;
            r27 = [[r0 m_nsSourceDisplayname] retain];
            asm{ stp        x25, x27, [sp, #0x8] };
            *(int32_t *)r31 = @"onAppWatermarkChanged  %@ %@";
            asm{ movz       w6, #0x225 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            [r27 release];
            [r21 release];
            [r26 release];
            [r25 release];
            [r24 release];
            [r22 release];
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r19 = r0;
            [r0 updateLayouts];
            0x0 = 0x50 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            r0 = [r19 release];
    }
    else {
            0x0 = 0x50 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    return;
}

- (void)OnAppInfoChanged:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x20;
    r19 = self;
    r20 = @selector(viewModel);
    r23 = [arg2 retain];
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r24 = r0;
    r21 = @selector(messageWrap);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r25 = r0;
    r0 = [r0 m_nsAppID];
    r26 = [r0 retain];
    r22 = [arg2 isEqualToString:r26];
    [r23 release];
    [r26 release];
    [r25 release];
    r0 = [r24 release];
    if (r22 != 0x0) {
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r24 = r0;
            r25 = [[r0 m_nsSourceUsername] retain];
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r26 = r0;
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r21 = r0;
            r27 = [[r0 m_nsSourceDisplayname] retain];
            asm{ stp        x25, x27, [sp, #0x8] };
            *(int32_t *)r31 = @"OnAppInfoChanged  %@ %@";
            asm{ movz       w6, #0x22f };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            [r27 release];
            [r21 release];
            [r26 release];
            [r25 release];
            [r24 release];
            [r22 release];
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r19 = r0;
            [r0 updateLayouts];
            0x0 = 0x50 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            r0 = [r19 release];
    }
    else {
            0x0 = 0x50 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    return;
}

- (void)onModifyContact:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r21 = [arg2 retain];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r22 = r0;
    [r0 setContact:r21];
    [r21 release];
    [r22 release];
    asm{ ldrsw      x23, [x8, #0xe60] };
    r21 = *(int32_t *)(self + r23);
    r0 = [self viewModel];
    r0 = [r0 retain];
    r20 = r0;
    r22 = [[r0 chatRoomDisplayName] retain];
    [r21 setText:r22];
    [r22 release];
    [r20 release];
    r19 = *(int32_t *)(self + r23);
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 colorList];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getColorByName:@"#737373"];
    r22 = [[r0 retain] retain];
    if (r22 != 0x0) {
            r0 = [r22 retain];
    }
    else {
            r0 = [UIColor clearColor];
            r0 = [r0 retain];
    }
    r23 = r0;
    [r22 release];
    [r19 setTextColor:r23];
    [r23 release];
    [r22 release];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r20 release];
    return;
}

- (void)onStrangerContactUpdated:(id)arg2 Contact:(id)arg3 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x23, [x8, #0xe60] };
    r20 = *(int32_t *)(self + r23);
    r0 = [self viewModel];
    r0 = [r0 retain];
    r21 = r0;
    r22 = [[r0 chatRoomDisplayName] retain];
    [r20 setText:r22];
    [r22 release];
    [r21 release];
    r19 = *(int32_t *)(self + r23);
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 colorList];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getColorByName:@"#737373"];
    r22 = [[r0 retain] retain];
    if (r22 != 0x0) {
            r0 = [r22 retain];
    }
    else {
            r0 = [UIColor clearColor];
            r0 = [r0 retain];
    }
    r23 = r0;
    [r22 release];
    [r19 setTextColor:r23];
    [r23 release];
    [r22 release];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r20 release];
    return;
}

- (void)onModifyQQContact:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r21 = [arg2 retain];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r19 = r0;
    [r0 setContact:r21];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void).cxx_destruct
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0xe84] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ee000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe74] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ee000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe70] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ee000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe6c] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ee000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe88] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ee000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe80] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ee000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe7c] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ee000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe78] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ee000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe64] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ee000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe60] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ee000, _cmd);
    asm{ movz       x1, #0x0 };
    asm{ ldrsw      x8, [x8, #0xe5c] };
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = objc_storeStrong(self + 0x1039ee000, _cmd);
    return;
}

@end
