//
//  TextMessageCellView.m
//
//  Generated by Class Decompile.
//  Repository is https://github.com/poboke/Class-Decompile
//  Copyright Â© 2016 www.poboke.com. All rights reserved.
//

@implementation TextMessageCellView

- (void)dealloc
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r19 = self;
    r21 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMExtensionCenter class];
    r0 = [r21 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 getExtension:@protocol(ITranslateMsgMgrExt)];
    r29 = 0x30;
    r20 = [r0 retain];
    [r22 release];
    [r21 release];
    if (r20 != 0x0) {
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r21 = r0;
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 GetChatName];
            r29 = 0x30;
            r23 = [r0 retain];
            [r20 unregisterExtension:r19 forKey:r23];
            [r23 release];
            [r22 release];
            [r21 release];
    }
    [r20 release];
    *(int32_t *)r31 = r19;
    *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d2378;
    r0 = [[0x0 super] dealloc];
    0x0 = r29 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return;
}

- (void)setViewModel:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    *(int32_t *)(r31 + 0xfffffffffffffff0) = r19;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d2378;
    [[0x0 super] setViewModel:arg2];
    r20 = @selector(viewModel);
    r0 = [r19 viewModel];
    r29 = 0x30;
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 release];
    if (r21 != 0x0) {
            r22 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMExtensionCenter class];
            r0 = [r22 getService:r2];
            r0 = [r0 retain];
            r23 = r0;
            r0 = [r0 getExtension:@protocol(ITranslateMsgMgrExt)];
            r29 = 0x30;
            r21 = [r0 retain];
            [r23 release];
            [r22 release];
            if (r21 != 0x0) {
                    r0 = [r19 viewModel];
                    r0 = [r0 retain];
                    r20 = r0;
                    r0 = [r0 messageWrap];
                    r0 = [r0 retain];
                    r22 = r0;
                    r0 = [r0 GetChatName];
                    r29 = r29;
                    r23 = [r0 retain];
                    [r21 registerExtension:r19 forKey:r23];
                    [r23 release];
                    [r22 release];
                    [r20 release];
            }
            r0 = [r21 release];
    }
    0x0 = r29 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return;
}

- (void)prepareForReuse
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    *(int32_t *)(r31 + 0xfffffffffffffff0) = r19;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d2378;
    [[0x0 super] prepareForReuse];
    r20 = @selector(viewModel);
    r0 = [r19 viewModel];
    r29 = 0x30;
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 release];
    if (r21 != 0x0) {
            r22 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMExtensionCenter class];
            r0 = [r22 getService:r2];
            r0 = [r0 retain];
            r23 = r0;
            r0 = [r0 getExtension:@protocol(ITranslateMsgMgrExt)];
            r29 = 0x30;
            r21 = [r0 retain];
            [r23 release];
            [r22 release];
            if (r21 != 0x0) {
                    r0 = [r19 viewModel];
                    r0 = [r0 retain];
                    r20 = r0;
                    r0 = [r0 messageWrap];
                    r0 = [r0 retain];
                    r22 = r0;
                    r0 = [r0 GetChatName];
                    r29 = r29;
                    r23 = [r0 retain];
                    [r21 unregisterExtension:r19 forKey:r23];
                    [r23 release];
                    [r22 release];
                    [r20 release];
            }
            r0 = [r21 release];
    }
    0x0 = r29 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return;
}

- (id)canBeReused
{
    return 0x1;
}

- (void)layoutContentView
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0x60;
    r19 = self;
    r20 = @selector(viewModel);
    r0 = [self viewModel];
    r29 = 0x60;
    r0 = [r0 retain];
    r24 = r0;
    if (([r0 isHeadPart] & 0x1 << 0x0) != 0x0) {
            *(int32_t *)(r31 + 0x58) = r20;
            asm{ nop         };
            r22 = @selector(sharedThemeManager);
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r25 = r0;
            r21 = @selector(getValueOfProperty:inRuleSet:);
            r0 = [r0 getValueOfProperty:r2 inRuleSet:r1];
            r29 = 0x60;
            r26 = [r0 retain];
            r27 = @selector(parseFloatFromValues:);
            [MMThemeUtil parseFloatFromValues:r2];
            *(int32_t *)(r31 + 0x40) = q0;
            [r26 release];
            [r25 release];
    }
    else {
            *(int32_t *)(r31 + 0x58) = r20;
            r22 = @selector(sharedThemeManager);
            r21 = @selector(getValueOfProperty:inRuleSet:);
            asm{ nop         };
            r27 = @selector(parseFloatFromValues:);
            asm{ movi.16b   v0, #0x0 };
            *(int32_t *)(r31 + 0x40) = q0;
    }
    asm{ stp        x27, x21, [sp, #0x28] };
    [r24 release];
    [r19 initBgImageView];
    [r19 initRichTextView];
    asm{ ldrsw      x23, [x8, #0x294] };
    *(int32_t *)(r31 + 0x18) = r23;
    r20 = *(int32_t *)(r19 + r23);
    asm{ nop         };
    r0 = objc_msgSend(MMThemeManager, r22);
    r0 = [r0 retain];
    r26 = r0;
    r0 = objc_msgSend(r0, r21);
    r0 = [r0 retain];
    r24 = r21;
    r28 = r0;
    r21 = r27;
    objc_msgSend(MMThemeUtil, r21);
    [r20 setOrigin:r28];
    [r28 release];
    [r26 release];
    r20 = *(int32_t *)(r19 + r23);
    r0 = objc_msgSend(r19, *(int32_t *)(r31 + 0x58));
    r0 = [r0 retain];
    r25 = r0;
    [r0 contentTextSize];
    [r20 setSize:r28];
    [r25 release];
    asm{ nop         };
    asm{ ldrsw      x20, [x8, #0x6b4] };
    *(int32_t *)(r31 + 0x38) = r20;
    r0 = *(int32_t *)(r19 + r20);
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0xe64] };
    r2 = *(int32_t *)(r19 + 0x1039ee000);
    *(int32_t *)(r31 + 0x10) = @selector(addSubview:);
    [r0 addSubview:r2];
    r0 = *(int32_t *)(r19 + r20);
    [r0 addSubview:*(int32_t *)(r19 + r23)];
    r27 = r22;
    r0 = objc_msgSend(MMThemeManager, r27);
    r0 = [r0 retain];
    r28 = r0;
    r26 = [objc_msgSend(r0, r24) retain];
    objc_msgSend(MMThemeUtil, r21);
    r0 = *(int32_t *)(r19 + r23);
    *(int32_t *)(r31 + 0x8) = @selector(width);
    [r0 width];
    asm{ fadd       d8, d8, d0 };
    r0 = objc_msgSend(MMThemeManager, r27);
    r0 = [r0 retain];
    r25 = r27;
    r22 = r0;
    r24 = [objc_msgSend(r0, r24) retain];
    r2 = r24;
    objc_msgSend(MMThemeUtil, r21);
    asm{ fadd       d8, d8, d0 };
    [r24 release];
    [r22 release];
    [r26 release];
    [r28 release];
    asm{ fmax       d8, d8, d0 };
    r0 = *(int32_t *)(r19 + r23);
    r20 = @selector(height);
    [r0 height];
    asm{ fadd       d9, d1, d0 };
    r1 = *(int32_t *)(r31 + 0x58);
    r28 = r1;
    r0 = objc_msgSend(r19, r1);
    r29 = r29;
    r0 = [r0 retain];
    r24 = r0;
    r27 = @selector(isTailPart);
    if (([r0 isTailPart] & 0x1 << 0x0) != 0x0) {
            *(int32_t *)(r31 + 0x20) = r20;
            asm{ nop         };
            *(int32_t *)(r31 + 0x40) = r25;
            r0 = objc_msgSend(MMThemeManager, r25);
            r0 = [r0 retain];
            r22 = r0;
            r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x30));
            r29 = r29;
            r26 = [r0 retain];
            r1 = *(int32_t *)(r31 + 0x28);
            r2 = r26;
            objc_msgSend(MMThemeUtil, r1);
            asm{ fadd       d9, d9, d0 };
            [r26 release];
            [r22 release];
    }
    else {
            *(int32_t *)(r31 + 0x20) = r20;
            *(int32_t *)(r31 + 0x40) = r25;
            asm{ movi.16b   v0, #0x0 };
            asm{ fadd       d9, d9, d0 };
    }
    r21 = r28;
    [r24 release];
    r23 = *(int32_t *)(r31 + 0x38);
    r0 = *(int32_t *)(r19 + r23);
    r24 = @selector(setFrame:);
    asm{ movi.16b   v0, #0x0 };
    asm{ movi.16b   v1, #0x0 };
    [r0 setFrame:r2];
    r0 = *(int32_t *)(r19 + r23);
    [r0 bounds];
    [r19 setFrameForBgImageView:r2];
    r0 = objc_msgSend(r19, r21);
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 translateInfo];
    r29 = r29;
    r28 = [r0 retain];
    [r20 release];
    if (r28 == 0x0) goto loc_1014d6ba4;
    goto loc_1014d6a84;

loc_1014d6ba4:
    r0 = objc_msgSend(r19, r21);
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 isTailPart];
    if ((r0 & 0x1 << 0x0) == 0x0) goto loc_1014d6c98;
    goto loc_1014d6bd0;

loc_1014d6c98:
    r0 = r20;

loc_1014d6c9c:
    [r0 release];

loc_1014d6ca0:
    0x0 = r29 - 0x60;
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        x26, x25, [sp, #0x20] };
    asm{ ldp        x28, x27, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x70 };
    r0 = [r28 release];
    return;

loc_1014d6bd0:
    r0 = objc_msgSend(r19, r21);
    r29 = r29;
    r0 = [r0 retain];
    r22 = [r0 canShowTranslateBottomView];
    [r0 release];
    [r20 release];
    if (r22 == 0x0) goto loc_1014d6ca0;
    r19 = *(int32_t *)(r19 + r23);
    r20 = *(int32_t *)(0x1039c3000 + 0x5d0);
    r0 = *(int32_t *)(0x1039c3000 + 0x3c8);
    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x40));
    r0 = [r0 retain];
    r21 = r0;
    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x30));
    r29 = r29;
    r22 = [r0 retain];
    objc_msgSend(r20, *(int32_t *)(r31 + 0x28));
    asm{ fmov       d1, #0xe };
    asm{ fadd       d8, d0, d1 };
    objc_msgSend(r19, *(int32_t *)(r31 + 0x20));
    asm{ fadd       d0, d8, d0 };
    [r19 setHeight:r22];
    [r22 release];
    r0 = r21;
    goto loc_1014d6c9c;

loc_1014d6a84:
    r0 = objc_msgSend(r19, r21);
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    if (([r0 canShowTranslatedText] & 0x1 << 0x0) == 0x0) goto loc_1014d6b9c;
    goto loc_1014d6aac;

loc_1014d6b9c:
    r0 = r20;

loc_1014d6ba0:
    [r0 release];
    goto loc_1014d6ba4;

loc_1014d6aac:
    r0 = objc_msgSend(r19, r21);
    r29 = r29;
    r0 = [r0 retain];
    r22 = r0;
    r26 = @selector(translatedLineY);
    [r0 translatedLineY];
    [r22 release];
    [r20 release];
    asm{ fcmp       d8, #0x0 };
    if (CPU_FLAGS & LE) goto loc_1014d6ba4;
    [r19 initTranslateLineView];
    r0 = *(int32_t *)(r19 + r23);
    asm{ ldrsw      x20, [x8, #0x298] };
    objc_msgSend(r0, *(int32_t *)(r31 + 0x10));
    r20 = *(int32_t *)(r19 + r20);
    r25 = *(int32_t *)(r31 + 0x18);
    r0 = *(int32_t *)(r19 + r25);
    [r0 left];
    r0 = *(int32_t *)(r19 + r25);
    [r0 top];
    r0 = objc_msgSend(r19, r21);
    r29 = r29;
    r0 = [r0 retain];
    r22 = r0;
    [r0 translatedLineY];
    asm{ fadd       d9, d9, d0 };
    r0 = *(int32_t *)(r19 + r25);
    objc_msgSend(r0, *(int32_t *)(r31 + 0x8));
    asm{ fmov       d3, #0x0 };
    [r20 setFrame:r2];
    r0 = r22;
    goto loc_1014d6ba0;
}

- (void)updateStatus
{
    asm{ stp        d9, d8, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = self;
    *(int32_t *)(r31 + 0xfffffffffffffff0) = r19;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d2378;
    [[0x0 super] updateStatus];
    asm{ ldrsw      x24, [x8, #0x29c] };
    r0 = *(int32_t *)(r19 + r24);
    [r0 setHidden:0x1];
    r20 = @selector(viewModel);
    r0 = [r19 viewModel];
    r29 = 0x40;
    r0 = [r0 retain];
    r21 = r0;
    if (([r0 isTailPart] & 0x1 << 0x0) == 0x0) goto loc_1014d6e8c;
    goto loc_1014d6d50;

loc_1014d6e8c:
    r0 = [r21 release];

loc_1014d6e94:
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x50 };
    return;

loc_1014d6d50:
    r0 = [r19 viewModel];
    r29 = 0x40;
    r0 = [r0 retain];
    r23 = [r0 canShowTranslateBottomView];
    [r0 release];
    r0 = [r21 release];
    if (r23 == 0x0) goto loc_1014d6e94;
    [r19 initTranslateStatusButton];
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x6b4] };
    r0 = *(int32_t *)(r19 + 0x1039ea000);
    r2 = *(int32_t *)(r19 + r24);
    [r0 addSubview:r2];
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r20 = r0;
    [r0 isSender];
    [r20 release];
    r20 = *(int32_t *)(r19 + r24);
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0xe68] };
    asm{ fadd       d8, d0, d1 };
    asm{ nop         };
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getValueOfProperty:@"message_node_bottom_sourceView_offset" inRuleSet:@"#message_node_view"];
    r29 = r29;
    r22 = [r0 retain];
    [MMThemeUtil parseFloatFromValues:r22];
    asm{ fadd       d1, d8, d0 };
    asm{ movi.16b   v0, #0x0 };
    [r20 setOrigin:r22];
    [r22 release];
    goto loc_1014d6e8c;
}

- (void)setHighlighted:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x10;
    r19 = arg2;
    r20 = self;
    r0 = [self highlighted];
    if ((r0 ^ r19) == 0x1) {
            *(int32_t *)r31 = r20;
            *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d2378;
            [[0x0 super] setHighlighted:r19];
            asm{ ldrsw      x8, [x8, #0x298] };
            r0 = *(int32_t *)(r20 + 0x1039e2000);
            r0 = [r0 setHighlighted:r19];
    }
    0x0 = 0x20 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (id)contentViewCenterY
{
    asm{ stp        d9, d8, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r19 = self;
    r20 = @selector(viewModel);
    r0 = [self viewModel];
    r29 = 0x30;
    r0 = [r0 retain];
    r22 = r0;
    r21 = @selector(contentMidY);
    [r0 contentMidY];
    [r22 release];
    asm{ fcmp       d8, #0x0 };
    if (CPU_FLAGS & GE) {
            *(int32_t *)r31 = r19;
            *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d2378;
            r0 = [[0x0 super] contentViewCenterY];
    }
    else {
            asm{ ldrsw      x8, [x8, #0x294] };
            r0 = *(int32_t *)(r19 + 0x1039e2000);
            [r0 top];
            r0 = [r19 viewModel];
            r29 = 0x30;
            r0 = [r0 retain];
            r19 = r0;
            [r0 contentMidY];
            asm{ fadd       d8, d8, d0 };
            r0 = [r19 release];
    }
    0x0 = r29 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x40 };
    return r0;
}

- (void)setNeedsDisplay
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    *(int32_t *)(r31 + 0xfffffffffffffff0) = self;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d2378;
    [[0x0 super] setNeedsDisplay];
    asm{ ldrsw      x8, [x8, #0x294] };
    r0 = *(int32_t *)(self + 0x1039e2000);
    r0 = [r0 setNeedsDisplay];
    0x0 = 0x10 - 0x10;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return;
}

- (void)initRichTextView
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r29 = 0x30;
    r19 = self;
    asm{ ldrsw      x8, [x8, #0x294] };
    r24 = r19 + 0x1039e2000;
    r21 = *(int32_t *)r24;
    if (r21 != 0x0) {
            r20 = @selector(viewModel);
    }
    else {
            r0 = [RichTextView alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)r24;
            *(int32_t *)r24 = r0;
            [r8 release];
            r0 = *(int32_t *)r24;
            [r0 setBTouchesPassOn:0x1];
            r21 = *(int32_t *)r24;
            r20 = @selector(viewModel);
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r22 = r0;
            r23 = [[r0 contentTextFont] retain];
            [r21 setOFont:r23];
            [r23 release];
            [r22 release];
            r21 = *(int32_t *)r24;
            r0 = [r19 viewModel];
            r29 = 0x30;
            r0 = [r0 retain];
            r22 = r0;
            r2 = [r0 parserType];
            [r21 setParserType:r2];
            [r22 release];
            r0 = *(int32_t *)r24;
            [r0 setBHandleLongPress:0x1];
            r0 = *(int32_t *)r24;
            [r0 setLinkDelegate:r19];
            r0 = *(int32_t *)r24;
            r2 = r19;
            [r0 setLayoutDelegate:r2];
            r21 = *(int32_t *)r24;
    }
    r0 = objc_msgSend(r19, r20);
    r0 = [r0 retain];
    r22 = r0;
    [r0 labelWidth];
    [r21 setFWidth:r2];
    [r22 release];
    r21 = *(int32_t *)r24;
    r0 = objc_msgSend(r19, r20);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 contentTextStyles];
    r20 = [r0 retain];
    asm{ movz       x3, #0x0 };
    [r21 setArrStyles:r20 withContent:r3];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)initTranslateLineView
{
    r0 = self;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = r0;
    asm{ ldrsw      x25, [x8, #0x298] };
    if (*(int32_t *)(r19 + r25) != 0x0) {
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        x26, x25, [sp], #0x50 };
            return;
    }
    else {
            r0 = [UIImageView alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)(r19 + r25);
            *(int32_t *)(r19 + r25) = r0;
            [r8 release];
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r24 = [r0 isSender];
            [r0 release];
            r23 = *(int32_t *)(r19 + r25);
            r21 = @selector(sharedThemeManager);
            r0 = [MMThemeManager sharedThemeManager];
            r29 = 0x40;
            r22 = [r0 retain];
            r20 = @selector(imageNamed:);
            if (r24 != 0x0) {
                    r24 = [[r22 imageNamed:r2] retain];
                    [r23 setImage:r24];
                    [r24 release];
                    [r22 release];
                    r19 = *(int32_t *)(r19 + r25);
                    r0 = *(int32_t *)(0x1039c3000 + 0x3c8);
                    r0 = [r0 sharedThemeManager];
                    r0 = [r0 retain];
                    r21 = r0;
                    r0 = [r0 imageNamed:r2];
            }
            else {
                    r24 = [[r22 imageNamed:r2] retain];
                    [r23 setImage:r24];
                    [r24 release];
                    [r22 release];
                    r19 = *(int32_t *)(r19 + r25);
                    r0 = *(int32_t *)(0x1039c3000 + 0x3c8);
                    r0 = [r0 sharedThemeManager];
                    r0 = [r0 retain];
                    r21 = r0;
                    r0 = [r0 imageNamed:r2];
            }
            r20 = [r0 retain];
            [r19 setHighlightedImage:r20];
            [r20 release];
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        x26, x25, [sp], #0x50 };
            r0 = [r21 release];
    }
    return;
}

- (void)initTranslateStatusButton
{
    asm{ stp        d9, d8, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    r19 = self;
    asm{ ldrsw      x26, [x8, #0x29c] };
    if (*(int32_t *)(r19 + r26) == 0x0) {
            r0 = [UIButton alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)(r19 + r26);
            *(int32_t *)(r19 + r26) = r0;
            [r8 release];
            r21 = *(int32_t *)(r19 + r26);
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 imageNamed:@"translation_bg.png"];
            r0 = [r0 retain];
            r23 = r0;
            r3 = 0x3;
            r24 = [[r0 stretchableImageWithLeftCapWidth:0x3 topCapHeight:r3] retain];
            asm{ movz       x3, #0x0 };
            [r21 setBackgroundImage:r24 forState:r3];
            [r24 release];
            [r23 release];
            [r22 release];
            r21 = *(int32_t *)(r19 + r26);
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 colorList];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 getColorByName:@"WHITE_TITLE_COLOR"];
            r29 = 0x50;
            r23 = [[r0 retain] retain];
            if (r23 != 0x0) {
                    r0 = [r23 retain];
            }
            else {
                    r0 = [UIColor clearColor];
                    r29 = r29;
                    r0 = [r0 retain];
            }
            r24 = r0;
            [r23 release];
            asm{ movz       x3, #0x0 };
            [r21 setTitleColor:r24 forState:r3];
            [r24 release];
            [r23 release];
            [r22 release];
            [r20 release];
            r0 = *(int32_t *)(r19 + r26);
            r20 = [[r0 titleLabel] retain];
            asm{ fmov       d0, #0xa };
            r0 = [UIFont systemFontOfSize:r24];
            r29 = r29;
            r21 = [r0 retain];
            [r20 setFont:r21];
            [r21 release];
            [r20 release];
    }
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 translateInfo];
    r29 = r29;
    r20 = [r0 retain];
    [r21 release];
    if ([r20 isTranslating] != 0x0) {
            r22 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMLanguageMgr class];
            r0 = [r22 getService:r2];
            r0 = [r0 retain];
            r3 = @"MessageContent_Translating";
            r21 = [[r0 getStringForCurLanguage:0x1032ed000 defaultTo:r3] retain];
            [r0 release];
            [r22 release];
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r23 = r0;
            r2 = @"translation_loading_icon.png";
            r0 = [r0 imageNamed:r2];
            r29 = r29;
    }
    else {
            r21 = @selector(brandWording);
            r0 = [r20 brandWording];
            r29 = r29;
            r0 = [r0 retain];
            r23 = [r0 length];
            [r0 release];
            if (r23 != 0x0) {
                    r0 = [r20 brandWording];
                    r29 = r29;
                    r21 = [r0 retain];
            }
            else {
                    r22 = [[MMServiceCenter defaultCenter] retain];
                    r2 = [MMLanguageMgr class];
                    r0 = [r22 getService:r2];
                    r0 = [r0 retain];
                    r23 = r0;
                    r3 = @"MessageContent_Translated";
                    r0 = [r0 getStringForCurLanguage:0x1032ed000 defaultTo:r3];
                    r29 = r29;
                    r21 = [r0 retain];
                    [r23 release];
                    [r22 release];
            }
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r23 = r0;
            r2 = @"translation_get_icon.png";
            r0 = [r0 imageNamed:r2];
            r29 = r29;
    }
    r22 = [r0 retain];
    [r23 release];
    r0 = *(int32_t *)(r19 + r26);
    asm{ movz       w2, #0x0 };
    [r0 setHidden:r2];
    r0 = *(int32_t *)(r19 + r26);
    asm{ movz       x3, #0x0 };
    [r0 setTitle:r21 forState:r3];
    r0 = *(int32_t *)(r19 + r26);
    asm{ movz       x3, #0x0 };
    [r0 setImage:r22 forState:r3];
    r0 = *(int32_t *)(r19 + r26);
    asm{ fmov       d3, #0x4 };
    asm{ movi.16b   v0, #0x0 };
    asm{ movi.16b   v1, #0x0 };
    asm{ movi.16b   v2, #0x0 };
    [r0 setImageEdgeInsets:r22];
    r0 = *(int32_t *)(r19 + r26);
    r0 = [r0 titleLabel];
    r0 = [r0 retain];
    r24 = r0;
    r0 = [r0 font];
    r25 = [r0 retain];
    [CControlUtil labelWidth:r21 maxWidth:r25 font:STK-1];
    [r25 release];
    [r24 release];
    r19 = *(int32_t *)(r19 + r26);
    [r22 size];
    asm{ fadd       d0, d8, d0 };
    asm{ fmov       d1, #0x8 };
    asm{ fadd       d0, d0, d1 };
    asm{ fmov       d1, #0xe };
    [r19 setSize:r21];
    [r22 release];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x60 };
    r0 = [r20 release];
    return;
}

- (id)getPreviewLinkForLocation:(id)arg2 inView:(id)arg3 
{
    asm{ ldrsw      x8, [x8, #0x294] };
    r0 = *(int32_t *)(self + 0x1039e2000);
    r0 = [r0 getPreviewLinkForLocation:arg2 inView:arg3];
    return r0;
}

- (id)getPreviewLinkFrameForLocation:(id)arg2 inView:(id)arg3 
{
    asm{ ldrsw      x8, [x8, #0x294] };
    r0 = *(int32_t *)(self + 0x1039e2000);
    r0 = [r0 getPreviewLinkFrameForLocation:arg2 inView:arg3];
    return r0;
}

- (id)canPeek
{
    return 0x1;
}

- (id)viewControllerToPreviewWithFromController:(id)arg2 forLocation:(id)arg3 inCoordinateView:(id)arg4 
{
    asm{ stp        d9, d8, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = [arg2 retain];
    r0 = [self getPreviewLinkForLocation:arg3 inView:r3];
    r20 = [r0 retain];
    if (r20 != 0x0) {
            r22 = @selector(class);
            [BaseMsgContentViewController class];
            r23 = @selector(isKindOfClass:);
            if ([r19 isKindOfClass:r2] != 0x0) {
                    r0 = [r19 m_delegate];
                    r29 = 0x40;
                    r21 = [r0 retain];
                    [BaseMsgContentLogicController class];
                    if ([r21 isKindOfClass:r2] != 0x0) {
                            r0 = [r21 getPreviewForLink:r20];
                            r22 = [r0 retain];
                            asm{ movz       w23, #0x0 };
                    }
                    else {
                            r23 = 0x1;
                    }
                    [r21 release];
                    if (r23 != 0x0) {
                            asm{ movz       x22, #0x0 };
                    }
            }
            else {
                    asm{ movz       x22, #0x0 };
            }
    }
    else {
            asm{ movz       x22, #0x0 };
    }
    [r20 release];
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x50 };
    r0 = [r22 autorelease];
    return r0;
}

- (id)previewingSourceRectForLocation:(id)arg2 inCoordinateView:(id)arg3 
{
    r0 = [self getPreviewLinkFrameForLocation:arg2 inView:arg3];
    return r0;
}

- (id)onlyContainsLink
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0xe0;
    r22 = *(int32_t *)__stack_chk_guard;
    r22 = *(int32_t *)r22;
    asm{ stur       x22, [x29, #0xffffffa8] };
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    asm{ stp        xzr, xzr, [sp, #0x18] };
    asm{ ldrsw      x8, [x8, #0x294] };
    r0 = *(int32_t *)(self + 0x1039e2000);
    r8 = 0x103953000;
    r0 = [r0 arrStyles];
    r0 = [r0 retain];
    r19 = r0;
    r21 = [r0 countByEnumeratingWithState:0x18 objects:0x58 count:STK-1];
    if (r21 == 0x0) goto loc_1014d7cd4;
    goto loc_1014d7c24;

loc_1014d7cd4:
    r20 = 0x1;

loc_1014d7cd8:
    r0 = [r19 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r22 == r8) {
            r0 = r20;
            0x0 = 0x50 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return r0;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_1014d7c24:
    r26 = **(int32_t *)(r31 + 0x28);
    *(int32_t *)(r31 + 0x10) = *(int32_t *)(0x103950000 + 0xa18);

loc_1014d7c40:
    r20 = 0x103951000;
    asm{ movz       x27, #0x0 };
    r22 = *(int32_t *)(0x103950000 + 0x608);
    r23 = *(int32_t *)(r20 + 0x358);

loc_1014d7c4c:
    if (**(int32_t *)(r31 + 0x28) != r26) {
            objc_enumerationMutation(r19);
    }
    r8 = *(int32_t *)(r31 + 0x20);
    r24 = *(int32_t *)(r8 + r27 * 0x8);
    objc_msgSend(*(int32_t *)(0x1039c9000 + 0x228), r22);
    if (objc_msgSend(r24, r23) == 0x0) goto loc_1014d7cc0;
    goto loc_1014d7c8c;

loc_1014d7cc0:
    asm{ movz       w20, #0x0 };

loc_1014d7cc4:
    r22 = *(int32_t *)__stack_chk_guard;
    r22 = *(int32_t *)r22;
    goto loc_1014d7cd8;

loc_1014d7c8c:
    r27 = r27 + 0x1;
    if (r27 < r21) goto loc_1014d7c4c;
    r21 = objc_msgSend(r19, *(int32_t *)(r31 + 0x10));
    if (r21 != 0x0) goto loc_1014d7c40;
    r20 = 0x1;
    goto loc_1014d7cc4;
}

- (void)onCopyLinkText:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r0 = [arg2 m_userData];
    r19 = [r0 retain];
    [CAppUtil setGenearlPasteboardString:r19];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r19 release];
    return;
}

- (void)onLinkLongPressed:(id)arg2 withRect:(id)arg3 
{
    r3 = arg3;
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x10;
    r19 = self;
    r22 = [arg2 retain];
    if (([r19 onlyContainsLink] & 0x1 << 0x0) == 0x0) {
            asm{ ldrsw      x20, [x8, #0x2a0] };
            r21 = *(int32_t *)(r19 + r20);
            if (r21 != 0x0) {
                    r2 = [r21 cancelButtonIndex];
                    asm{ movz       w3, #0x0 };
                    [r21 dismissWithClickedButtonIndex:r2 animated:r3];
            }
            r0 = [WCUIActionSheet alloc];
            r0 = [r0 initWithTitle:r22];
            r8 = *(int32_t *)(r19 + r20);
            *(int32_t *)(r19 + r20) = r0;
            [r8 release];
            r0 = *(int32_t *)(r19 + r20);
            [r0 setDelegate:r19];
            r0 = *(int32_t *)(r19 + r20);
            [r0 setM_userData:r22];
            r25 = *(int32_t *)(r19 + r20);
            r26 = [[MMServiceCenter defaultCenter] retain];
            *(int32_t *)(r31 + 0x8) = r22;
            r2 = [MMLanguageMgr class];
            r0 = [r26 getService:r2];
            r0 = [r0 retain];
            r27 = r0;
            r28 = [[r0 getStringForCurLanguage:0x1032ed000 defaultTo:@"Common_CopyLink"] retain];
            [r25 addBtnTitle:r28 target:r19 sel:STK-1];
            [r28 release];
            [r27 release];
            [r26 release];
            r25 = *(int32_t *)(r19 + r20);
            r2 = [r25 numberOfButtons];
            [r25 setCancelButtonIndex:r2];
            r25 = *(int32_t *)(r19 + r20);
            r21 = [[MMServiceCenter defaultCenter] retain];
            r0 = [r21 getService:[MMLanguageMgr class]];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 getStringForCurLanguage:0x103268000 defaultTo:@"Common_Cancel"];
            r29 = 0x50;
            r23 = [r0 retain];
            asm{ movz       x3, #0x0 };
            asm{ movz       x4, #0x0 };
            [r25 addCancelBtnTitle:r23 target:@"Common_Cancel" sel:STK-1];
            [r23 release];
            r0 = r22;
            r22 = *(int32_t *)(r31 + 0x8);
            [r0 release];
            [r21 release];
            r0 = *(int32_t *)(r19 + r20);
            [r0 showInView:r19];
    }
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r22 release];
    return;
}

- (void)actionSheet:(id)arg2 clickedButtonAtIndex:(id)arg3 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x30;
    r20 = arg3;
    r21 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0x2a0] };
    if (*(int32_t *)(r21 + 0x1039e2000) != r19) {
            asm{ stp        x19, x8, [sp, #0x8] };
            *(int32_t *)r31 = @"called action sheet [%@] is not my action sheet [%@]";
            asm{ movz       w6, #0x129 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            *(int32_t *)(r31 + 0x20) = r21;
            *(int32_t *)(r31 + 0x28) = *(int32_t *)0x1039d2378;
            [[0x20 super] actionSheet:r19 clickedButtonAtIndex:r20];
    }
    else {
            if ([r19 cancelButtonIndex] != r20) {
                    [r21 onCopyLinkText:r19];
            }
    }
    r0 = [r19 release];
    0x0 = 0x20 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (void)actionSheet:(id)arg2 didDismissWithButtonIndex:(id)arg3 
{
    r3 = arg3;
    r8 = self;
    asm{ ldrsw      x9, [x9, #0x2a0] };
    r0 = *(int32_t *)(r8 + 0x1039e2000);
    if (r0 != arg2) {
            asm{ stp        x29, x30, [sp, #0xfffffff0]! };
            0x0 = 0x0 - 0x20;
            asm{ stp        x2, x0, [sp, #0x8] };
            *(int32_t *)r31 = @"called action sheet [%@] is not my action sheet [%@]";
            asm{ movz       w6, #0x136 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            r0 = [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            0x0 = 0x0;
            asm{ ldp        x29, x30, [sp], #0x10 };
            return;
    }
    else {
            *(int32_t *)(r8 + 0x1039e2000) = 0x0;
            r0 = [r0 release];
    }
    return;
}

- (id)operationMenuItems
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x50;
    r19 = self;
    r28 = *(int32_t *)__stack_chk_guard;
    r28 = *(int32_t *)r28;
    *(int32_t *)(r31 + 0x48) = r28;
    r21 = @selector(viewModel);
    r0 = [self viewModel];
    r0 = [r0 retain];
    r20 = r0;
    r22 = @selector(messageWrap);
    r0 = [r0 messageWrap];
    r29 = 0x50;
    r0 = [r0 retain];
    r23 = r0;
    if ([r0 m_uiMessageType] != 0x31) goto loc_1014d8314;
    goto loc_1014d8204;

loc_1014d8314:
    *(int32_t *)(r31 + 0x30) = r21;

loc_1014d8330:
    [r23 release];
    [r20 release];
    *(int32_t *)(r31 + 0x28) = r22;
    *(int32_t *)(r31 + 0x20) = @selector(alloc);
    r0 = [NSMutableArray alloc];
    r23 = [r0 init];
    r25 = [UIMenuItem alloc];
    *(int32_t *)(r31 + 0x8) = @selector(defaultCenter);
    r27 = [[MMServiceCenter defaultCenter] retain];
    r26 = @selector(class);
    [MMLanguageMgr class];
    r20 = @selector(getService:);
    r0 = [r27 getService:r2];
    r0 = [r0 retain];
    r21 = r0;
    *(int32_t *)(r31 + 0x10) = @selector(getStringForCurLanguage:defaultTo:);
    r22 = [[r0 getStringForCurLanguage:0x103264000 defaultTo:@"Emoticon_Copy"] retain];
    *(int32_t *)(r31 + 0x18) = @selector(initWithTitle:action:);
    r24 = [r25 initWithTitle:r22 action:@selector(onCopy:)];
    *(int32_t *)(r31 + 0x38) = r24;
    [r22 release];
    [r21 release];
    [r27 release];
    r25 = @selector(addObject:);
    [r23 addObject:r2];
    r0 = [r19 forwardMenuItem];
    r29 = r29;
    r21 = [r0 retain];
    [r23 addObject:r2];
    [r21 release];
    if ([r19 canShowFavoriteMenuItem] != 0x0) {
            r0 = [r19 favoriteMenuItem];
            r29 = r29;
            r21 = [r0 retain];
            [r23 addObject:r2];
            [r21 release];
    }
    if ([r19 canShowShareMsgToOpenSDKMenuItem] != 0x0) {
            r0 = [r19 shareMsgToOpenSDKMenuItem];
            r29 = r29;
            r21 = [r0 retain];
            [r23 addObject:r2];
            [r21 release];
    }
    if ([r19 canShowRevokeMsgMenuItem] != 0x0) {
            r0 = [r19 revokeMsgMenuItem];
            r29 = r29;
            r21 = [r0 retain];
            [r23 addObject:r2];
            [r21 release];
    }
    if ([r19 canShowTranslateMenuItem] != 0x0) {
            *(int32_t *)r31 = r23;
            r23 = *(int32_t *)(r31 + 0x8);
            r27 = [objc_msgSend(MMServiceCenter, r23) retain];
            [TranslateMsgMgr class];
            r21 = [[r27 getService:r2] retain];
            r0 = objc_msgSend(r19, *(int32_t *)(r31 + 0x30));
            r0 = [r0 retain];
            r22 = r0;
            r24 = [objc_msgSend(r0, *(int32_t *)(r31 + 0x28)) retain];
            r28 = [r21 showTranslatedTextNow:r24];
            [r24 release];
            [r22 release];
            [r21 release];
            [r27 release];
            r21 = [objc_msgSend(MMServiceCenter, r23) retain];
            [MMLanguageMgr class];
            r0 = [r21 getService:r2];
            r29 = r29;
            r23 = [r0 retain];
            if ((r28 & 0x1 << 0x0) != 0x0) {
                    r1 = *(int32_t *)(r31 + 0x10);
                    r0 = objc_msgSend(r23, r1);
                    r29 = r29;
            }
            else {
                    r1 = *(int32_t *)(r31 + 0x10);
                    r0 = objc_msgSend(r23, r1);
                    r29 = r29;
            }
            r22 = [r0 retain];
            [r23 release];
            [r21 release];
            r28 = *(int32_t *)__stack_chk_guard;
            r28 = *(int32_t *)r28;
            r23 = *(int32_t *)r31;
            r0 = objc_msgSend(UIMenuItem, *(int32_t *)(r31 + 0x20));
            r1 = *(int32_t *)(r31 + 0x18);
            r21 = objc_msgSend(r0, r1);
            [r23 addObject:r2];
            [r21 release];
            [r22 release];
    }
    if ([r19 canShowDeleteMenuItem] != 0x0) {
            r0 = [r19 deleteMenuItem];
            r29 = r29;
            r21 = [r0 retain];
            [r23 addObject:r2];
            [r21 release];
    }
    if ([r19 canShowMoreMenuItem] != 0x0) {
            r0 = [r19 moreMenuItem];
            r29 = r29;
            r19 = [r0 retain];
            [r23 addObject:r2];
            [r19 release];
    }
    r0 = *(int32_t *)(r31 + 0x38);

loc_1014d87c4:
    r0 = [r0 release];
    if (r28 == *(int32_t *)(r31 + 0x48)) {
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            r0 = [r23 autorelease];
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_1014d8204:
    r0 = objc_msgSend(r19, r21);
    r0 = [r0 retain];
    r24 = r0;
    r0 = objc_msgSend(r0, r22);
    r29 = 0x50;
    r0 = [r0 retain];
    r25 = r0;
    if ([r0 m_uiAppMsgInnerType] != 0x9) goto loc_1014d831c;
    goto loc_1014d8244;

loc_1014d831c:
    *(int32_t *)(r31 + 0x30) = r21;
    [r25 release];
    [r24 release];
    goto loc_1014d8330;

loc_1014d8244:
    *(int32_t *)(r31 + 0x30) = r21;
    r0 = objc_msgSend(r19, r21);
    r0 = [r0 retain];
    r26 = r0;
    r0 = objc_msgSend(r0, r22);
    r29 = r29;
    r0 = [r0 retain];
    r27 = r0;
    r0 = [r0 m_uiShowType];
    r21 = r28;
    r28 = r0;
    [r27 release];
    [r26 release];
    [r25 release];
    [r24 release];
    [r23 release];
    [r20 release];
    COND = r28 != 0x5;
    r28 = r21;
    if (!COND) {
            r19 = [[r19 deleteMenuItem] retain];
            *(int32_t *)(r31 + 0x40) = r19;
            r0 = [NSArray arrayWithObjects:0x40 count:0x1];
            r29 = r29;
            r23 = [r0 retain];
            r0 = r19;
    }
    else {
            *(int32_t *)(r31 + 0x28) = r22;
            *(int32_t *)(r31 + 0x20) = @selector(alloc);
            r0 = [NSMutableArray alloc];
            r23 = [r0 init];
            r25 = [UIMenuItem alloc];
            *(int32_t *)(r31 + 0x8) = @selector(defaultCenter);
            r27 = [[MMServiceCenter defaultCenter] retain];
            r26 = @selector(class);
            [MMLanguageMgr class];
            r20 = @selector(getService:);
            r0 = [r27 getService:r2];
            r0 = [r0 retain];
            r21 = r0;
            *(int32_t *)(r31 + 0x10) = @selector(getStringForCurLanguage:defaultTo:);
            r22 = [[r0 getStringForCurLanguage:0x103264000 defaultTo:@"Emoticon_Copy"] retain];
            *(int32_t *)(r31 + 0x18) = @selector(initWithTitle:action:);
            r24 = [r25 initWithTitle:r22 action:@selector(onCopy:)];
            *(int32_t *)(r31 + 0x38) = r24;
            [r22 release];
            [r21 release];
            [r27 release];
            r25 = @selector(addObject:);
            [r23 addObject:r2];
            r0 = [r19 forwardMenuItem];
            r29 = r29;
            r21 = [r0 retain];
            [r23 addObject:r2];
            [r21 release];
            if ([r19 canShowFavoriteMenuItem] != 0x0) {
                    r0 = [r19 favoriteMenuItem];
                    r29 = r29;
                    r21 = [r0 retain];
                    [r23 addObject:r2];
                    [r21 release];
            }
            if ([r19 canShowShareMsgToOpenSDKMenuItem] != 0x0) {
                    r0 = [r19 shareMsgToOpenSDKMenuItem];
                    r29 = r29;
                    r21 = [r0 retain];
                    [r23 addObject:r2];
                    [r21 release];
            }
            if ([r19 canShowRevokeMsgMenuItem] != 0x0) {
                    r0 = [r19 revokeMsgMenuItem];
                    r29 = r29;
                    r21 = [r0 retain];
                    [r23 addObject:r2];
                    [r21 release];
            }
            if ([r19 canShowTranslateMenuItem] != 0x0) {
                    *(int32_t *)r31 = r23;
                    r23 = *(int32_t *)(r31 + 0x8);
                    r27 = [objc_msgSend(MMServiceCenter, r23) retain];
                    [TranslateMsgMgr class];
                    r21 = [[r27 getService:r2] retain];
                    r0 = objc_msgSend(r19, *(int32_t *)(r31 + 0x30));
                    r0 = [r0 retain];
                    r22 = r0;
                    r24 = [objc_msgSend(r0, *(int32_t *)(r31 + 0x28)) retain];
                    r28 = [r21 showTranslatedTextNow:r24];
                    [r24 release];
                    [r22 release];
                    [r21 release];
                    [r27 release];
                    r21 = [objc_msgSend(MMServiceCenter, r23) retain];
                    [MMLanguageMgr class];
                    r0 = [r21 getService:r2];
                    r29 = r29;
                    r23 = [r0 retain];
                    if ((r28 & 0x1 << 0x0) != 0x0) {
                            r1 = *(int32_t *)(r31 + 0x10);
                            r0 = objc_msgSend(r23, r1);
                            r29 = r29;
                    }
                    else {
                            r1 = *(int32_t *)(r31 + 0x10);
                            r0 = objc_msgSend(r23, r1);
                            r29 = r29;
                    }
                    r22 = [r0 retain];
                    [r23 release];
                    [r21 release];
                    r28 = *(int32_t *)__stack_chk_guard;
                    r28 = *(int32_t *)r28;
                    r23 = *(int32_t *)r31;
                    r0 = objc_msgSend(UIMenuItem, *(int32_t *)(r31 + 0x20));
                    r1 = *(int32_t *)(r31 + 0x18);
                    r21 = objc_msgSend(r0, r1);
                    [r23 addObject:r2];
                    [r21 release];
                    [r22 release];
            }
            if ([r19 canShowDeleteMenuItem] != 0x0) {
                    r0 = [r19 deleteMenuItem];
                    r29 = r29;
                    r21 = [r0 retain];
                    [r23 addObject:r2];
                    [r21 release];
            }
            if ([r19 canShowMoreMenuItem] != 0x0) {
                    r0 = [r19 moreMenuItem];
                    r29 = r29;
                    r19 = [r0 retain];
                    [r23 addObject:r2];
                    [r19 release];
            }
            r0 = *(int32_t *)(r31 + 0x38);
    }
    goto loc_1014d87c4;
}

- (id)canShowTranslateMenuItem
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    r20 = @selector(viewModel);
    r0 = [self viewModel];
    r0 = [r0 retain];
    r23 = r0;
    r21 = @selector(messageWrap);
    r0 = [r0 messageWrap];
    r24 = [r0 retain];
    r22 = [TranslateMsgUtil couldTranslateMsg:r24];
    [r24 release];
    r0 = [r23 release];
    if (r22 != 0x0) {
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 m_nsContent];
            r21 = [r0 retain];
            r22 = [TranslateSnsUtil isSameLanguage:r21];
            [r21 release];
            [r20 release];
            [r19 release];
            r0 = r22 ^ 0x1;
    }
    else {
            asm{ movz       w0, #0x0 };
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return r0;
}

- (void)onCopy:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    0x0 = 0x0 - 0x10;
    r0 = [CAppUtil getGenearlPasteboard];
    r0 = [r0 retain];
    r19 = r0;
    [r0 setPersistent:0x1];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r23 = [r0 canShowTranslatedText];
    [r0 release];
    r0 = [self viewModel];
    r20 = [r0 retain];
    if (r23 != 0x0) {
            r22 = [[r20 translateInfo] retain];
            [r20 release];
            r23 = [[r22 originText] retain];
            r24 = [[r22 translatedText] retain];
            asm{ stp        x23, x24, [sp] };
            r0 = [NSString stringWithFormat:@"%@      %@", r3, STK-2];
            r29 = 0x40;
            r21 = [r0 retain];
            [r24 release];
            [r23 release];
            r0 = r22;
    }
    else {
            r0 = [r20 contentText];
            r29 = 0x40;
            r21 = [r0 retain];
            r0 = r20;
    }
    [r0 release];
    r0 = *(int32_t *)(0x1039c3000 + 0x5b8);
    [r0 setGenearlPasteboardString:r21];
    [r21 release];
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)onTranslateMsg:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x10;
    r19 = self;
    r0 = [SettingUtil getMainSettingExt];
    r29 = 0x50;
    r0 = [r0 retain];
    r20 = r0;
    if (([r0 m_bShowTranslateIntroTip] & 0x1 << 0x0) != 0x0) {
            asm{ ldrsw      x22, [x8, #0x2a4] };
            if (*(int32_t *)(r19 + r22) != 0x0) {
                    r1 = @selector(translateMsg);
                    r0 = r19;
            }
            else {
                    asm{ nop         };
                    asm{ ldrsw      x8, [x8, #0x354] };
                    r21 = r19 + 0x1039ea000;
                    r23 = objc_loadWeakRetained(r21);
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r21);
                            r26 = @selector(onHideKeyboard);
                            asm{ nop         };
                            r25 = [r0 respondsToSelector:r26];
                            [r0 release];
                            [r23 release];
                            if (r25 != 0x0) {
                                    r0 = objc_loadWeakRetained(r21);
                                    r21 = r0;
                                    [r0 onHideKeyboard];
                                    [r21 release];
                            }
                    }
                    *(int32_t *)(r31 + 0x8) = [MMTipsViewController alloc];
                    r21 = [[MMServiceCenter defaultCenter] retain];
                    r2 = [MMLanguageMgr class];
                    r0 = [r21 getService:r2];
                    r0 = [r0 retain];
                    r23 = r0;
                    r24 = [[r0 getStringForCurLanguage:0x1032ed000 defaultTo:@"MessageContent_Translate_Intro_Title"] retain];
                    r25 = [[MMServiceCenter defaultCenter] retain];
                    r0 = [r25 getService:[MMLanguageMgr class]];
                    r0 = [r0 retain];
                    r26 = r0;
                    r0 = [r0 getStringForCurLanguage:0x1032ed000 defaultTo:@"MessageContent_Translate_Intro_Content"];
                    r29 = 0x50;
                    r27 = [r0 retain];
                    asm{ movz       x3, #0x0 };
                    asm{ movz       x5, #0x0 };
                    r0 = *(int32_t *)(r31 + 0x8);
                    r0 = [r0 initWithTitle:r24 andImageName:@"MessageContent_Translate_Intro_Content" andContent:STK0 andCancelText:STK-1];
                    r8 = *(int32_t *)(r19 + r22);
                    *(int32_t *)(r19 + r22) = r0;
                    [r8 release];
                    [r27 release];
                    [r26 release];
                    [r25 release];
                    [r24 release];
                    [r23 release];
                    [r21 release];
                    r0 = *(int32_t *)(r19 + r22);
                    [r0 setM_delegate:r19];
                    r0 = *(int32_t *)(r19 + r22);
                    r1 = @selector(show);
            }
    }
    else {
            r1 = @selector(translateMsg);
            r0 = r19;
    }
    objc_msgSend(r0, r1);
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r20 release];
    return;
}

- (void)translateMsg
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r20 = self;
    r21 = @selector(viewModel);
    r0 = [self viewModel];
    r0 = [r0 retain];
    r23 = r0;
    r22 = @selector(translateInfo);
    r0 = [r0 translateInfo];
    r29 = 0x50;
    r19 = [r0 retain];
    [r23 release];
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x354] };
    r24 = r20 + 0x1039ea000;
    r25 = objc_loadWeakRetained(r24);
    if (r25 != 0x0) {
            r0 = objc_loadWeakRetained(r24);
            r23 = @selector(onClickTranslateMsg:translateInfo:);
            r27 = [r0 respondsToSelector:r23];
            [r0 release];
            [r25 release];
            if (r27 != 0x0) {
                    r24 = objc_loadWeakRetained(r24);
                    r0 = [r20 viewModel];
                    r0 = [r0 retain];
                    r25 = r0;
                    r26 = [[r0 messageWrap] retain];
                    r0 = [r20 viewModel];
                    r0 = [r0 retain];
                    r27 = r0;
                    r0 = [r0 translateInfo];
                    r29 = 0x50;
                    r22 = [r0 retain];
                    [r24 onClickTranslateMsg:r2 translateInfo:r1];
                    [r22 release];
                    [r27 release];
                    [r26 release];
                    [r25 release];
                    [r24 release];
            }
    }
    if ((r19 == 0x0) || ([r19 isTextTooLong] == 0x0)) {
            r22 = [[MMServiceCenter defaultCenter] retain];
            r2 = [TranslateMsgMgr class];
            r23 = [[r22 getService:r2] retain];
            r0 = [r20 viewModel];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 messageWrap];
            r21 = [r0 retain];
            [r23 translateMsg:r21];
            [r21 release];
            [r20 release];
            [r23 release];
            r0 = r22;
    }
    else {
            r20 = [[FavAddItemHelper getFavAddHelper] retain];
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r21 = r0;
            r22 = [[r0 imageNamed:@"TipViewErrorIcon"] retain];
            r23 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMLanguageMgr class];
            r0 = [r23 getService:r2];
            r0 = [r0 retain];
            r24 = r0;
            r0 = [r0 getStringForCurLanguage:0x1032ed000 defaultTo:@"MessageContent_Translate_Text_Too_Long_Tip"];
            r25 = [r0 retain];
            [r20 showSaveResultTip:r22 andText:r25];
            [r25 release];
            [r24 release];
            [r23 release];
            [r22 release];
            [r21 release];
            r0 = r20;
    }
    [r0 release];
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 release];
    return;
}

- (void)onTouchDownRepeat
{
    asm{ stp        d11, d10, [sp, #0xffffff90]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    r19 = self;
    *(int32_t *)(r31 + 0xfffffffffffffff0) = @"Down Repeat";
    asm{ movz       w6, #0x1a7 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    asm{ ldrsw      x23, [x8, #0x294] };
    r0 = *(int32_t *)(r19 + r23);
    r20 = [[r0 superview] retain];
    r0 = *(int32_t *)(r19 + r23);
    [r0 frame];
    r0 = [CAppViewControllerManager getAppViewControllerManager];
    r0 = [r0 retain];
    r21 = r0;
    r22 = [[r0 getMainWindow] retain];
    [r20 convertRect:r22 toView:r3];
    [r22 release];
    [r21 release];
    [r20 release];
    [UiUtil statusBarHeight];
    asm{ fsub       d11, d11, d0 };
    [UiUtil navigationBarHeight];
    asm{ fsub       d11, d11, d0 };
    r0 = [TextFloatPreview alloc];
    r0 = [r0 init];
    asm{ ldrsw      x24, [x8, #0x2a8] };
    r8 = *(int32_t *)(r19 + r24);
    *(int32_t *)(r19 + r24) = r0;
    [r8 release];
    r20 = *(int32_t *)(r19 + r24);
    asm{ fmov       d0, #0x1b };
    r21 = [[UIFont dynamicSystemFontOfSize:r22] retain];
    [r20 setOFont:r21];
    [r21 release];
    r21 = *(int32_t *)(r19 + r24);
    r20 = @selector(viewModel);
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r22 = r0;
    r2 = [r0 parserType];
    [r21 setParserType:r2];
    [r22 release];
    r0 = *(int32_t *)(r19 + r24);
    [r0 setM_delegate:r19];
    r21 = *(int32_t *)(r19 + r24);
    r0 = *(int32_t *)(r19 + r23);
    r22 = [[r0 linkDelegate] retain];
    [r21 setLinkDelegate:r22];
    [r22 release];
    r21 = *(int32_t *)(r19 + r24);
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r22 = r0;
    r23 = [[r0 contentText] retain];
    [r21 setContent:r23];
    [r23 release];
    [r22 release];
    r0 = *(int32_t *)(r19 + r24);
    [r0 setOriginFrame:r23];
    r0 = *(int32_t *)(r19 + r24);
    [r0 showWithAnimate:0x1];
    r22 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMExtensionCenter class];
    r0 = [r22 getService:r2];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 getExtension:@protocol(IMsgRevokeExt)];
    r21 = [r0 retain];
    [r23 release];
    [r22 release];
    if (r21 != 0x0) {
            [r21 registerExtension:r19];
    }
    [r21 release];
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x354] };
    r22 = r19 + 0x1039ea000;
    r0 = objc_loadWeakRetained(r22);
    r23 = r0;
    if (r23 != 0x0) {
            r0 = objc_loadWeakRetained(r22);
            r21 = @selector(onClickTextFloatPreView:);
            r25 = [r0 respondsToSelector:r21];
            [r0 release];
            r0 = [r23 release];
            if (r25 != 0x0) {
                    r22 = objc_loadWeakRetained(r22);
                    r0 = [r19 viewModel];
                    r0 = [r0 retain];
                    r19 = r0;
                    r20 = [[r0 messageWrap] retain];
                    [r22 onClickTextFloatPreView:r2];
                    [r20 release];
                    [r19 release];
                    0x0 = 0x60 - 0x60;
                    asm{ ldp        x29, x30, [sp, #0x60] };
                    asm{ ldp        x20, x19, [sp, #0x50] };
                    asm{ ldp        x22, x21, [sp, #0x40] };
                    asm{ ldp        x24, x23, [sp, #0x30] };
                    asm{ ldp        x26, x25, [sp, #0x20] };
                    asm{ ldp        d9, d8, [sp, #0x10] };
                    asm{ ldp        d11, d10, [sp], #0x70 };
                    r0 = [r22 release];
            }
            else {
                    0x0 = 0x60 - 0x60;
                    asm{ ldp        x29, x30, [sp, #0x60] };
                    asm{ ldp        x20, x19, [sp, #0x50] };
                    asm{ ldp        x22, x21, [sp, #0x40] };
                    asm{ ldp        x24, x23, [sp, #0x30] };
                    asm{ ldp        x26, x25, [sp, #0x20] };
                    asm{ ldp        d9, d8, [sp, #0x10] };
                    asm{ ldp        d11, d10, [sp], #0x70 };
                    return;
            }
    }
    else {
            0x0 = 0x60 - 0x60;
            asm{ ldp        x29, x30, [sp, #0x60] };
            asm{ ldp        x20, x19, [sp, #0x50] };
            asm{ ldp        x22, x21, [sp, #0x40] };
            asm{ ldp        x24, x23, [sp, #0x30] };
            asm{ ldp        x26, x25, [sp, #0x20] };
            asm{ ldp        d9, d8, [sp, #0x10] };
            asm{ ldp        d11, d10, [sp], #0x70 };
            return;
    }
    return;
}

- (void)onLongTouch
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    0x0 = 0x0 - 0x10;
    r19 = self;
    asm{ ldrsw      x8, [x8, #0x294] };
    r0 = *(int32_t *)(r19 + 0x1039e2000);
    if ([r0 bTouchBeginOnLink] != 0x0) {
            r0 = [r19 onlyContainsLink];
            if (r0 != 0x0) {
                    *(int32_t *)r31 = @"Long Touch";
                    asm{ movz       x3, #0x0 };
                    asm{ movz       w4, #0x0 };
                    [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                    [r19 showOperationMenu];
                    0x0 = 0x10 - 0x10;
                    asm{ ldp        x29, x30, [sp, #0x10] };
                    asm{ ldp        x20, x19, [sp], #0x20 };
                    r0 = [r19 setHighlighted:0x1];
            }
            else {
                    0x0 = 0x10 - 0x10;
                    asm{ ldp        x29, x30, [sp, #0x10] };
                    asm{ ldp        x20, x19, [sp], #0x20 };
                    return;
            }
    }
    else {
            *(int32_t *)r31 = @"Long Touch";
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            [r19 showOperationMenu];
            0x0 = 0x10 - 0x10;
            asm{ ldp        x29, x30, [sp, #0x10] };
            asm{ ldp        x20, x19, [sp], #0x20 };
            r0 = [r19 setHighlighted:0x1];
    }
    return;
}

- (void)onTouchCancel
{
    asm{ movz       w2, #0x0 };
    r0 = [self setHighlighted:r2];
    return;
}

- (void)triggerLongPressFor3DTouchAtLocation:(id)arg2 inCoordinateView:(id)arg3 
{
    r3 = arg3;
    asm{ stp        d9, d8, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x10;
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0x294] };
    r0 = *(int32_t *)(r20 + 0x1039e2000);
    if (([r0 bTouchBeginOnLink] == 0x0) || ([r20 onlyContainsLink] != 0x0)) {
            *(int32_t *)r31 = r20;
            *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d2378;
            [[0x0 super] triggerLongPressFor3DTouchAtLocation:r19 inCoordinateView:r3];
    }
    r0 = [r19 release];
    0x0 = 0x20 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x30 };
    return;
}

- (void)onHide
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = self;
    r21 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMExtensionCenter class];
    r0 = [r21 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    r2 = @protocol(IMsgRevokeExt);
    r0 = [r0 getExtension:r2];
    r20 = [r0 retain];
    [r22 release];
    [r21 release];
    if (r20 != 0x0) {
            r2 = r19;
            [r20 unregisterExtension:r2];
    }
    [r20 release];
    asm{ ldrsw      x20, [x8, #0x2a8] };
    r0 = *(int32_t *)(r19 + r20);
    asm{ movz       x2, #0x0 };
    [r0 setRootViewController:r2];
    r0 = *(int32_t *)(r19 + r20);
    *(int32_t *)(r19 + r20) = 0x0;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r0 release];
    return;
}

- (void)onWindowHide
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x354] };
    r19 = self + 0x1039ea000;
    r0 = objc_loadWeakRetained(r19);
    r21 = r0;
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r20 = @selector(onFullScreenWindowWillHide);
            r23 = [r0 respondsToSelector:r20];
            [r0 release];
            r0 = [r21 release];
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r19 = r0;
                    [r0 onFullScreenWindowWillHide];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r19 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)onClickTipsBtn:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r0 = [SettingUtil getMainSettingExt];
    r0 = [r0 retain];
    r20 = r0;
    asm{ movz       w2, #0x0 };
    [r0 setM_bShowTranslateIntroTip:arg2];
    r21 = [[MMServiceCenter defaultCenter] retain];
    r2 = [AccountStorageMgr class];
    r0 = [r21 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    [r0 SaveSettingExt];
    [r22 release];
    [r21 release];
    [self translateMsg];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r20 release];
    return;
}

- (void)onTranslateMessageChanged:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    r22 = [arg2 m_uiMesLocalID];
    r20 = @selector(viewModel);
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r21 = [r0 m_uiMesLocalID];
    [r0 release];
    r0 = [r23 release];
    if (r22 == r21) {
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 translateInfo];
            r29 = 0x30;
            r21 = [r0 retain];
            [r22 release];
            if ((([r21 isTranslating] & 0x1 << 0x0) != 0x0) || ([r21 isTranslateFailed] != 0x0)) {
                    [r19 updateNodeStatus];
            }
            else {
                    asm{ movz       w2, #0x0 };
                    [r19 setHighlighted:r2];
                    r0 = [r19 viewModel];
                    r0 = [r0 retain];
                    r19 = r0;
                    [r0 updateLayouts];
                    [r19 release];
            }
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            r0 = [r21 release];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)onTranslateMessageFailed:(id)arg2 errTip:(id)arg3 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r22 = [arg2 retain];
    r19 = [arg3 retain];
    r20 = [arg2 m_uiMesLocalID];
    [r22 release];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r23 = [r0 m_uiMesLocalID];
    [r0 release];
    [r21 release];
    if (r20 == r23) {
            r20 = [[FavAddItemHelper getFavAddHelper] retain];
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r21 = r0;
            r0 = [r0 imageNamed:@"TipViewErrorIcon"];
            r22 = [r0 retain];
            [r20 showSaveResultTip:r22 andText:r19];
            [r22 release];
            [r21 release];
            [r20 release];
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)onLinkHighlighted:(id)arg2 url:(id)arg3 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r22 = [arg3 retain];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r20 = r0;
    [r0 setLinkHighlighted:arg2 url:r22];
    [r22 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r20 release];
    return;
}

- (void)onLinkClicked:(id)arg2 withRect:(id)arg3 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x354] };
    r21 = [arg2 retain];
    r20 = objc_loadWeakRetained(self + 0x1039ea000);
    r0 = [self viewModel];
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 messageWrap];
    r22 = [r0 retain];
    [r20 tagLink:r21 messageWrap:r22];
    [r21 release];
    [r22 release];
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r20 release];
    return;
}

- (void)onPhoneClicked:(id)arg2 withRect:(id)arg3 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r20 = self;
    r19 = [arg2 retain];
    if ([DeviceInfo isiPhone] != 0x0) {
            r0 = [r20 viewModel];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 contact];
            r22 = [r0 retain];
            [MMPhoneNumberHandler handlePhoneNumber:r19 contact:r22];
            [r22 release];
            [r20 release];
    }
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void).cxx_destruct
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0x2a8] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e2000, _cmd);
    asm{ ldrsw      x8, [x8, #0x2a0] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e2000, _cmd);
    asm{ ldrsw      x8, [x8, #0x2a4] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e2000, _cmd);
    asm{ ldrsw      x8, [x8, #0x298] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e2000, _cmd);
    asm{ ldrsw      x8, [x8, #0x29c] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e2000, _cmd);
    asm{ movz       x1, #0x0 };
    asm{ ldrsw      x8, [x8, #0x294] };
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = objc_storeStrong(self + 0x1039e2000, _cmd);
    return;
}

@end
