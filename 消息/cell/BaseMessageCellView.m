//
//  BaseMessageCellView.m
//
//  Generated by Class Decompile.
//  Repository is https://github.com/poboke/Class-Decompile
//  Copyright Â© 2016 www.poboke.com. All rights reserved.
//

@implementation BaseMessageCellView

- (void)dealloc
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    0x0 = 0x0 - 0x10;
    r0 = [NSNotificationCenter defaultCenter];
    r0 = [r0 retain];
    r20 = r0;
    [r0 removeObserver:self];
    [r20 release];
    r0 = [UIMenuController sharedMenuController];
    r0 = [r0 retain];
    r20 = r0;
    asm{ movz       w2, #0x0 };
    asm{ movz       w3, #0x0 };
    [r0 setMenuVisible:self animated:r3];
    [r20 release];
    *(int32_t *)r31 = self;
    *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d41f0;
    r0 = [[0x0 super] dealloc];
    0x0 = 0x10 - 0x10;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return;
}

- (void)setHighlighted:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = arg2;
    r20 = self;
    r21 = @selector(viewModel);
    r0 = [self viewModel];
    r0 = [r0 retain];
    r23 = [r0 highlighted] ^ r19;
    r0 = [r0 release];
    if (r23 == 0x1) {
            r0 = [r20 viewModel];
            r0 = [r0 retain];
            r20 = r0;
            [r0 setHighlighted:r19];
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            r0 = [r20 release];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (id)highlighted
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r0 = [self viewModel];
    r0 = [r0 retain];
    r20 = [r0 highlighted];
    [r0 release];
    r0 = r20;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return r0;
}

- (void)layoutInternal
{
    asm{ stp        d9, d8, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = self;
    [self removeAllSubViews];
    r0 = [UIView alloc];
    asm{ ldp        d0, d1, [x8] };
    asm{ ldp        d2, d3, [x8, #0x10] };
    r0 = [r0 initWithFrame:r2];
    asm{ ldrsw      x23, [x8, #0x6b4] };
    r8 = *(int32_t *)(r19 + r23);
    *(int32_t *)(r19 + r23) = r0;
    [r8 release];
    r2 = *(int32_t *)(r19 + r23);
    [r19 addSubview:r2];
    [r19 layoutContentView];
    r0 = *(int32_t *)(r19 + r23);
    r20 = @selector(height);
    [r0 height];
    r21 = @selector(viewModel);
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r22 = r0;
    [r0 contentViewSize];
    asm{ fsub       d0, d8, d1 };
    asm{ fabs       d8, d0 };
    r0 = [r22 release];
    asm{ fmov       d0, #0x1 };
    asm{ fcmp       d8, d0 };
    if (CPU_FLAGS & LE) {
            r0 = [r19 viewModel];
            r21 = [r0 retain];
            r0 = *(int32_t *)(r19 + r23);
            [r0 height];
            [r21 updateContentViewHeight:r2];
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x50 };
            r0 = [r21 release];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x50 };
            return;
    }
    return;
}

- (void)layoutFinished
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    [self updateNodeStatus];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r20 = r0;
    r2 = [r0 highlighted];
    [self setHighlighted:r2];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r20 release];
    return;
}

- (void)layoutContentView
{
    r0 = self;
    return;
}

- (void)updateNodeStatus
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0x6b8] };
    r0 = *(int32_t *)(self + 0x1039ea000);
    [r0 removeFromSuperview];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [self updateStatus];
    return;
}

- (id)accessibilityLabel
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r0 = [self viewModel];
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 accessibilityDescription];
    r20 = [r0 retain];
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r20 autorelease];
    return r0;
}

- (void)updateStatus
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = self;
    r20 = @selector(viewModel);
    r0 = [self viewModel];
    r0 = [r0 retain];
    r22 = [r0 isShowStatusView];
    r0 = [r0 release];
    if (r22 != 0x0) {
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r21 = [r0 isShowSendOKView];
            r0 = [r0 release];
            if (r21 != 0x0) {
                    asm{ ldp        x29, x30, [sp, #0x20] };
                    asm{ ldp        x20, x19, [sp, #0x10] };
                    asm{ ldp        x22, x21, [sp], #0x30 };
                    r0 = [r19 addSendOKView];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x20] };
                    asm{ ldp        x20, x19, [sp, #0x10] };
                    asm{ ldp        x22, x21, [sp], #0x30 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            return;
    }
    return;
}

- (id)contentViewCenterY
{
    asm{ ldrsw      x8, [x8, #0x6b4] };
    r0 = *(int32_t *)(self + 0x1039ea000);
    r0 = [r0 centerY];
    return r0;
}

- (void)doForward
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [ForwardMessageMgr class];
    r20 = [[r19 getService:r2] retain];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r22 = r0;
    r23 = [[r0 messageWrap] retain];
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x354] };
    r0 = objc_loadWeakRetained(self + 0x1039ea000);
    r21 = r0;
    r0 = [r0 getViewController];
    r24 = [r0 retain];
    [r20 forwardMessage:r23 fromViewController:r24];
    [r24 release];
    [r21 release];
    [r23 release];
    [r22 release];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)doFavorite
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r19 = self;
    r20 = @selector(viewModel);
    r0 = [self viewModel];
    r0 = [r0 retain];
    r23 = r0;
    r22 = @selector(messageWrap);
    r24 = [[r0 messageWrap] retain];
    r21 = [[FavoritesUtil ConvertMsgToFavItem:r24] retain];
    [r24 release];
    [r23 release];
    r0 = [FavAddItemHelper getFavAddHelper];
    r0 = [r0 retain];
    r23 = r0;
    [r0 addFavItem:r21];
    [r23 release];
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x354] };
    r24 = r19 + 0x1039ea000;
    r25 = objc_loadWeakRetained(r24);
    if (r25 != 0x0) {
            r0 = objc_loadWeakRetained(r24);
            r23 = @selector(onClickFavMenu:);
            r27 = [r0 respondsToSelector:r23];
            [r0 release];
            [r25 release];
            if (r27 != 0x0) {
                    r24 = objc_loadWeakRetained(r24);
                    r0 = [r19 viewModel];
                    r0 = [r0 retain];
                    r19 = r0;
                    r0 = [r0 messageWrap];
                    r20 = [r0 retain];
                    [r24 onClickFavMenu:r2];
                    [r20 release];
                    [r19 release];
                    [r24 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r21 release];
    return;
}

- (void)hideUIStatus
{
    asm{ ldrsw      x8, [x8, #0x6b8] };
    r0 = *(int32_t *)(self + 0x1039ea000);
    r0 = [r0 setHidden:0x1];
    return;
}

- (void)showUIStatus
{
    asm{ movz       w2, #0x0 };
    asm{ ldrsw      x8, [x8, #0x6b8] };
    r0 = *(int32_t *)(self + 0x1039ea000);
    r0 = [r0 setHidden:r2];
    return;
}

- (void)setDisableAllOperation
{
    r0 = self;
    asm{ ldrsw      x8, [x8, #0x6bc] };
    *(int8_t *)(r0 + 0x1039ea000) = 0x1;
    return;
}

- (id)displayViewForImageBrowser
{
    r0 = self;
    asm{ movz       x0, #0x0 };
    return r0;
}

- (id)showRectForMenuController
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0x6b4] };
    r20 = *(int32_t *)(self + 0x1039ea000);
    [r20 bounds];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r20 convertRect:self toView:r3];
    return r0;
}

- (void)addSendOKView
{
    asm{ stp        d9, d8, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = self;
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x354] };
    r20 = objc_loadWeakRetained(r19 + 0x1039ea000);
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 messageWrap];
    r22 = [r0 retain];
    r23 = [r20 isMsgLastSend:r22];
    [r22 release];
    [r21 release];
    r0 = [r20 release];
    if (r23 != 0x0) {
            asm{ ldrsw      x8, [x8, #0x6b8] };
            r23 = r19 + 0x1039ea000;
            r2 = *(int32_t *)r23;
            if (r2 == 0x0) {
                    r20 = [UIImageView alloc];
                    r0 = [MMThemeManager sharedThemeManager];
                    r0 = [r0 retain];
                    r21 = r0;
                    r0 = [r0 imageNamed:@"sent_ok_icon.png"];
                    r22 = [r0 retain];
                    r0 = [r20 initWithImage:r22];
                    r8 = *(int32_t *)r23;
                    *(int32_t *)r23 = r0;
                    [r8 release];
                    [r22 release];
                    [r21 release];
                    r2 = *(int32_t *)r23;
            }
            [r19 addSubview:r2];
            r20 = *(int32_t *)r23;
            asm{ ldrsw      x8, [x8, #0x6b4] };
            r0 = *(int32_t *)(r19 + 0x1039ea000);
            [r0 left];
            asm{ fmov       d1, #0xfffffffffffffffa };
            asm{ fadd       d8, d0, d1 };
            r0 = *(int32_t *)r23;
            [r0 width];
            asm{ fmov       d1, #0x0 };
            asm{ fmul       d0, d0, d1 };
            asm{ fadd       d8, d8, d0 };
            [r19 contentViewCenterY];
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x50 };
            r0 = [r20 setCenter:r2];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x50 };
            return;
    }
    return;
}

- (id)isTouchInView:(id)arg2 
{
    asm{ stp        d9, d8, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r20 = self;
    r0 = [arg2 retain];
    r19 = r0;
    if (UIAccessibilityIsVoiceOverRunning(r0) != 0x0) {
            *(int32_t *)r31 = @"voiceover running";
            asm{ movz       w6, #0x91 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            r20 = 0x1;
    }
    else {
            asm{ ldrsw      x21, [x8, #0x6b4] };
            r2 = *(int32_t *)(r20 + r21);
            [r19 locationInView:r2];
            r0 = *(int32_t *)(r20 + r21);
            if (r0 != 0x0) {
                    r0 = [r0 bounds];
                    if (CGRectContainsPoint(r0, @selector(bounds)) != 0x0) {
                            r20 = 0x1;
                    }
                    else {
                            asm{ movz       w20, #0x0 };
                    }
            }
            else {
                    r20 = 0x1;
            }
    }
    [r19 release];
    r0 = r20;
    0x0 = 0x30 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x40 };
    return r0;
}

- (void)touchesBegan:(id)arg2 withEvent:(id)arg3 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r29 = 0x30;
    0x0 = 0x0 - 0x10;
    r20 = self;
    r19 = [arg2 retain];
    *(int32_t *)r31 = r20;
    *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d41f0;
    r2 = r19;
    r3 = arg3;
    [[0x0 super] touchesBegan:r2 withEvent:r3];
    asm{ ldrsw      x8, [x8, #0x6bc] };
    r9 = *(int8_t *)(r20 + 0x1039ea000);
    asm{ ldrsw      x8, [x8, #0x6c0] };
    if (r9 == 0x0) goto loc_101eb768c;
    goto loc_101eb7680;

loc_101eb768c:
    *(int8_t *)(r20 + 0x1039ea000) = 0x0;
    asm{ ldrsw      x8, [x8, #0x6c4] };
    *(int8_t *)(r20 + 0x1039ea000) = 0x0;
    asm{ ldrsw      x8, [x8, #0x6c8] };
    if (*(int32_t *)(r20 + 0x1039ea000) != 0x0) {
            r0 = [UIMenuController sharedMenuController];
            r29 = 0x30;
            r0 = [r0 retain];
            r21 = r0;
            r3 = 0x1;
            asm{ movz       w2, #0x0 };
            [r0 setMenuVisible:r2 animated:r3];
            [r21 release];
    }
    r0 = [r19 anyObject];
    r29 = r29;
    r21 = [r0 retain];
    if (([r20 isTouchInView:r21] & 0x1 << 0x0) == 0x0) goto loc_101eb782c;
    goto loc_101eb771c;

loc_101eb782c:
    [r21 release];

loc_101eb7834:
    r0 = [r19 release];
    0x0 = r29 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return;

loc_101eb771c:
    r22 = @selector(tapCount);
    if ([r21 tapCount] < 0x3) goto loc_101eb7744;
    goto loc_101eb7738;

loc_101eb7744:
    if ([r21 tapCount] != 0x2) goto loc_101eb77dc;
    goto loc_101eb7758;

loc_101eb77dc:
    asm{ ldrsw      x8, [x8, #0x6cc] };
    *(int8_t *)(r20 + 0x1039ea000) = 0x0;
    asm{ movz       x3, #0x0 };
    asm{ fmov       d0, #0x0 };
    [r20 safePerformSelector:@selector(LongPressEvents) withObject:r3 afterDelay:STK-1];
    asm{ movz       x3, #0x0 };
    [r20 safePerformSelector:@selector(onTouchDown) withObject:r3 afterDelay:STK-1];
    goto loc_101eb782c;

loc_101eb7758:
    asm{ movz       x4, #0x0 };
    [NSObject safeCancelPreviousPerformRequestsWithTarget:r20 selector:@selector(LongPressEvents) object:STK-1];
    asm{ movz       x4, #0x0 };
    [NSObject safeCancelPreviousPerformRequestsWithTarget:r20 selector:@selector(onTouchDown) object:STK-1];
    asm{ movz       x4, #0x0 };
    [NSObject safeCancelPreviousPerformRequestsWithTarget:r20 selector:@selector(onTouchUpInside) object:STK-1];
    asm{ ldrsw      x8, [x8, #0x6cc] };
    *(int8_t *)(r20 + 0x1039ea000) = 0x1;
    r1 = @selector(onTouchDownRepeat);

loc_101eb77d0:
    [r20 onTouchDownRepeat];
    goto loc_101eb782c;

loc_101eb7738:
    r1 = @selector(onTouchCancel);
    goto loc_101eb77d0;

loc_101eb7680:
    *(int8_t *)(r20 + 0x1039ea000) = 0x1;
    goto loc_101eb7834;
}

- (void)touchesEnded:(id)arg2 withEvent:(id)arg3 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r29 = 0x20;
    0x0 = 0x0 - 0x10;
    r21 = arg3;
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0x6c0] };
    if (*(int8_t *)(r20 + 0x1039ea000) == 0x0) {
            *(int8_t *)(r20 + 0x1039ea000) = 0x1;
            *(int32_t *)r31 = r20;
            *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d41f0;
            [[0x0 super] touchesEnded:r19 withEvent:r21];
            asm{ ldrsw      x8, [x8, #0x6bc] };
            if (*(int8_t *)(r20 + 0x1039ea000) == 0x0) {
                    r0 = [r19 anyObject];
                    r29 = 0x20;
                    r21 = [r0 retain];
                    if ([r20 isTouchInView:r21] != 0x0) {
                            r3 = @selector(LongPressEvents);
                            asm{ movz       x4, #0x0 };
                            [NSObject safeCancelPreviousPerformRequestsWithTarget:r20 selector:r3 object:STK-1];
                            asm{ ldrsw      x8, [x8, #0x6cc] };
                            if ((*(int8_t *)(r20 + 0x1039ea000) == 0x0) && ([r21 tapCount] <= 0x1)) {
                                    asm{ ldrsw      x8, [x8, #0x6c4] };
                                    if (*(int8_t *)(r20 + 0x1039ea000) == 0x0) {
                                            [r20 onTouchEnded];
                                            asm{ movz       x3, #0x0 };
                                            [r20 safePerformSelector:@selector(onTouchUpInside) withObject:r3 afterDelay:STK-1];
                                    }
                            }
                    }
                    [r21 release];
            }
    }
    r0 = [r19 release];
    0x0 = r29 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (void)touchesCancelled:(id)arg2 withEvent:(id)arg3 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x10;
    r19 = self;
    r21 = [arg2 retain];
    *(int32_t *)r31 = r19;
    *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d41f0;
    [[0x0 super] touchesCancelled:r21 withEvent:arg3];
    [r21 release];
    asm{ movz       x4, #0x0 };
    [NSObject safeCancelPreviousPerformRequestsWithTarget:r19 selector:@selector(LongPressEvents) object:STK-1];
    asm{ movz       x4, #0x0 };
    [NSObject safeCancelPreviousPerformRequestsWithTarget:r19 selector:@selector(onTouchDown) object:STK-1];
    asm{ movz       x4, #0x0 };
    r0 = [NSObject safeCancelPreviousPerformRequestsWithTarget:r19 selector:@selector(onTouchUpInside) object:STK-1];
    asm{ ldrsw      x8, [x8, #0x6c4] };
    if (*(int8_t *)(r19 + 0x1039ea000) == 0x0) {
            r0 = [r19 onTouchCancel];
    }
    0x0 = 0x20 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (void)triggerLongPressFor3DTouchAtLocation:(id)arg2 inCoordinateView:(id)arg3 
{
    r3 = arg3;
    asm{ stp        d9, d8, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r29 = 0x40;
    0x0 = 0x0 - 0x10;
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0x6cc] };
    if (*(int8_t *)(r20 + 0x1039ea000) == 0x0) {
            asm{ ldrsw      x8, [x8, #0x6c0] };
            if (*(int8_t *)(r20 + 0x1039ea000) == 0x0) {
                    r0 = [r20 forceTouchShakeView];
                    r0 = [r0 retain];
                    r22 = r0;
                    [r0 convertPoint:r19 fromView:r3];
                    [r22 release];
                    r0 = [r20 forceTouchShakeView];
                    r29 = 0x40;
                    r0 = [r0 retain];
                    asm{ movz       x2, #0x0 };
                    r22 = [r0 pointInside:r19 withEvent:r3];
                    [r0 release];
                    if (r22 != 0x0) {
                            *(int32_t *)r31 = @"onLongTouchForMiss3dTouch";
                            asm{ movz       w6, #0xf7 };
                            asm{ movz       x3, #0x0 };
                            asm{ movz       w4, #0x0 };
                            [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                            asm{ ldrsw      x8, [x8, #0x6c4] };
                            *(int8_t *)(r20 + 0x1039ea000) = 0x1;
                            asm{ movz       x4, #0x0 };
                            [NSObject safeCancelPreviousPerformRequestsWithTarget:r20 selector:@selector(LongPressEvents) object:STK-1];
                            asm{ movz       x4, #0x0 };
                            [NSObject safeCancelPreviousPerformRequestsWithTarget:r20 selector:@selector(onTouchDown) object:STK-1];
                            asm{ movz       x4, #0x0 };
                            [NSObject safeCancelPreviousPerformRequestsWithTarget:r20 selector:@selector(onTouchUpInside) object:STK-1];
                            [r20 onTouchDown];
                            [r20 onLongTouch];
                    }
            }
    }
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)LongPressEvents
{
    asm{ ldrsw      x8, [x8, #0x6cc] };
    *(int8_t *)(self + 0x1039ea000) = 0x1;
    r0 = [self onLongTouch];
    return;
}

- (void)onTouchDown
{
    r0 = self;
    asm{ ldrsw      x8, [x8, #0x6c8] };
    if (*(int32_t *)(r0 + 0x1039ea000) != 0x0) {
            asm{ stp        x20, x19, [sp, #0xffffffe0]! };
            asm{ stp        x29, x30, [sp, #0x10] };
            r0 = [UIMenuController sharedMenuController];
            r0 = [r0 retain];
            r19 = r0;
            asm{ movz       w2, #0x0 };
            [r0 setMenuVisible:r2 animated:0x1];
            asm{ ldp        x29, x30, [sp, #0x10] };
            asm{ ldp        x20, x19, [sp], #0x20 };
            r0 = [r19 release];
    }
    else {
            return;
    }
    return;
}

- (void)onTouchDownRepeat
{
    r0 = self;
    return;
}

- (void)onTouchUpInside
{
    r0 = self;
    return;
}

- (void)onTouchEnded
{
    r0 = self;
    return;
}

- (void)onLongTouch
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    [self showOperationMenu];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [self setHighlighted:0x1];
    return;
}

- (void)onTouchCancel
{
    asm{ movz       w2, #0x0 };
    r0 = [self setHighlighted:r2];
    return;
}

- (id)forceTouchShakeView
{
    asm{ ldrsw      x8, [x8, #0x6b4] };
    r0 = *(int32_t *)(self + 0x1039ea000);
    r0 = objc_retainAutoreleaseReturnValue(r0);
    return r0;
}

- (id)canPeek
{
    r0 = self;
    asm{ movz       w0, #0x0 };
    return r0;
}

- (id)previewingSourceRectForLocation:(id)arg2 inCoordinateView:(id)arg3 
{
    asm{ stp        d11, d10, [sp, #0xffffffa0]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    asm{ ldrsw      x23, [x8, #0x6b4] };
    r20 = *(int32_t *)(self + r23);
    r22 = [arg2 retain];
    [r20 bounds];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r21 = [r0 isSender];
    [r0 release];
    asm{ movi.16b   v0, #0x0 };
    asm{ fmov       d1, #0x4 };
    asm{ fcsel      d0, d1, d0, ne };
    asm{ fadd       d0, d8, d0 };
    asm{ fmov       d1, #0x4 };
    asm{ fadd       d1, d9, d1 };
    asm{ fmov       d2, #0xfffffffffffffffc };
    asm{ fadd       d2, d10, d2 };
    asm{ fmov       d3, #0xfffffffffffffff2 };
    asm{ fadd       d3, d11, d3 };
    r0 = *(int32_t *)(self + r23);
    [r0 convertRect:r22 toView:arg3];
    r0 = [r22 release];
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x60 };
    return r0;
}

- (void).cxx_destruct
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0x6b8] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ea000, _cmd);
    asm{ ldrsw      x8, [x8, #0x6b4] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ea000, _cmd);
    asm{ movz       x1, #0x0 };
    asm{ ldrsw      x8, [x8, #0x6c8] };
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = objc_storeStrong(self + 0x1039ea000, _cmd);
    return;
}

- (id)targetRectForMenuController
{
    asm{ stp        d15, d14, [sp, #0xffffff60]! };
    asm{ stp        d13, d12, [sp, #0x10] };
    asm{ stp        d11, d10, [sp, #0x20] };
    asm{ stp        d9, d8, [sp, #0x30] };
    asm{ stp        x28, x27, [sp, #0x40] };
    asm{ stp        x26, x25, [sp, #0x50] };
    asm{ stp        x24, x23, [sp, #0x60] };
    asm{ stp        x22, x21, [sp, #0x70] };
    asm{ stp        x20, x19, [sp, #0x80] };
    asm{ stp        x29, x30, [sp, #0x90] };
    r19 = self;
    r24 = @selector(class);
    r2 = [ChatTableViewCell class];
    r26 = [[r19 ancestorOrSelfWithClass:r2] retain];
    r0 = [r19 ancestorOrSelfWithClass:[UITableView class]];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 indexPathForCell:r26];
    r0 = [r0 retain];
    r21 = r0;
    r2 = [r0 section];
    r25 = [r20 numberOfRowsInSection:r2];
    r2 = [r21 section];
    [r20 rectForSection:r2];
    r3 = [r21 section];
    asm{ movz       x2, #0x0 };
    r22 = [[NSIndexPath indexPathForRow:r2 inSection:r3] retain];
    r3 = [r21 section];
    r23 = [[NSIndexPath indexPathForRow:r25 - 0x1 inSection:r3] retain];
    r0 = [r20 indexPathsForVisibleRows];
    r29 = 0x90;
    r0 = [r0 retain];
    r25 = r0;
    r27 = @selector(containsObject:);
    if ([r0 containsObject:r2] != 0x0) {
            r28 = [[r20 cellForRowAtIndexPath:r22] retain];
            [r26 release];
            r2 = [BaseMessageCellView class];
            r0 = [r28 descendantOrSelfWithClass:r2];
            r29 = 0x90;
            r0 = [r0 retain];
            r26 = r0;
            r0 = [r0 showRectForMenuController];
            asm{ ldp        d4, d5, [x8] };
            asm{ ldp        d6, d7, [x8, #0x10] };
            if ((CGRectEqualToRect(r0, @selector(showRectForMenuController)) & 0x1 << 0x0) == 0x0) {
                    [r26 convertRect:r20 toView:r3];
                    asm{ fsub       d0, d1, d8 };
                    asm{ fsub       d11, d11, d0 };
            }
            [r26 release];
            r26 = r28;
    }
    if (([r25 containsObject:r2] & 0x1 << 0x0) != 0x0) {
            r27 = [[r20 cellForRowAtIndexPath:r23] retain];
            [r26 release];
            r2 = [BaseMessageCellView class];
            r0 = [r27 descendantOrSelfWithClass:r2];
            r0 = [r0 retain];
            r26 = r0;
            r24 = @selector(showRectForMenuController);
            r0 = [r0 showRectForMenuController];
            asm{ ldp        d4, d5, [x8] };
            asm{ ldp        d6, d7, [x8, #0x10] };
            if ((CGRectEqualToRect(r0, r24) & 0x1 << 0x0) == 0x0) {
                    [r26 convertRect:r20 toView:r3];
                    asm{ fadd       d0, d1, d3 };
                    asm{ fsub       d11, d0, d8 };
            }
            [r26 release];
            r26 = r27;
    }
    else {
            r24 = @selector(showRectForMenuController);
    }
    r0 = [r19 class];
    asm{ ldp        d4, d5, [x8] };
    asm{ ldp        d6, d7, [x8, #0x10] };
    if ((CGRectEqualToRect(r0, r24) & 0x1 << 0x0) == 0x0) {
            [r19 convertRect:r20 toView:r3];
    }
    [r25 release];
    [r23 release];
    [r22 release];
    [r21 release];
    [r20 release];
    r0 = [r26 release];
    asm{ ldp        x29, x30, [sp, #0x90] };
    asm{ ldp        x20, x19, [sp, #0x80] };
    asm{ ldp        x22, x21, [sp, #0x70] };
    asm{ ldp        x24, x23, [sp, #0x60] };
    asm{ ldp        x26, x25, [sp, #0x50] };
    asm{ ldp        x28, x27, [sp, #0x40] };
    asm{ ldp        d9, d8, [sp, #0x30] };
    asm{ ldp        d11, d10, [sp, #0x20] };
    asm{ ldp        d13, d12, [sp, #0x10] };
    asm{ ldp        d15, d14, [sp], #0xa0 };
    return r0;
}

- (void)showOperationMenu
{
    r20 = self;
    NSMutableArray *array = [[NSMutableArray array] retain];//r19
    BaseMessageViewModel *viewModel = [self viewModel]; // r0
    if ([viewModel isChatRoomMessageUnsafe]) { // r22
            UIMenuItem *restoreMenuItem = [[self restoreMenuItem] retain]; // r21
            [array addObject:restoreMenuItem];
            UIMenuItem *deleteMenuItem = [self deleteMenuItem]; // r0
            [array addObject:deleteMenuItem];
    }
    else {
            NSArray *items = [self operationMenuItems]; // r0
            [array addObjectsFromArray:items];
    }
    r21 = r20 + 0x1039ea000; // æ¾å°å½åselfçæ§å¶å¨
    weak_vc = objc_loadWeakRetained(vc);
    if (weak_vc) {
            vc = objc_loadWeakRetained(vc);
            if ([vc respondsToSelector:@selector(filterShowMenuItem:sender:)]) {
                    r0 = objc_loadWeakRetained(r21);
                    r23 = r0;
                    r3 = r20;
                    [vc filterShowMenuItem:r2 sender:r1];
            }
    }
    r0 = [NSArray arrayWithArray:array];
    r8 = *(int32_t *)(r20 + r26);
    *(int32_t *)(r20 + r26) = r0;
    if (vc) {
            r0 = objc_loadWeakRetained(r21);
            if ([vc respondsToSelector:@selector(willShowMenuController:)]) {
                    [vc willShowMenuController:r2];
            }
    }
    [r20 becomeFirstResponder];
    [r20 targetRectForMenuController];
    r21 = [[r20 ancestorOrSelfWithClass:[UITableView class]] retain];
    UIMenuController *menuVC = [UIMenuController sharedMenuController];
    [menuVC setTargetRect:r21 inView:r3];
    r2 = *(int32_t *)(r20 + r26);
    [menuVC setMenuItems:r2];
    r24 = [[r20 window] retain];
    r23 = @selector(mainWindow);
    r0 = [UiUtil mainWindow];
    r29 = r29;
    r0 = [r0 retain];
    r25 = r0;
    [r0 release];
    [r24 release];
    if (r24 == r25) {
            r0 = *(int32_t *)(0x1039c3000 + 0x3d0);
            r0 = [r0 mainWindow];
            r29 = r29;
            r0 = [r0 retain];
            r23 = r0;
            [r0 makeKeyAndVisible];
            [r23 release];
    }
    [r22 setMenuVisible:0x1 animated:0x1];
    r0 = [NSNotificationCenter defaultCenter];
    r0 = [r0 retain];
    r23 = r0;
    asm{ movz       x5, #0x0 };
    [r0 addObserver:r20 selector:@selector(handleMenuControllerWillHideMenuNotification:) name:STK0 object:STK-1];
    [r23 release];
    [r22 release];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        x26, x25, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x70 };
    r0 = [r19 release];
    return;
}

- (void)handleMenuControllerWillHideMenuNotification:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x6c8] };
    r0 = *(int32_t *)(self + 0x1039ea000);
    *(int32_t *)(self + 0x1039ea000) = 0x0;
    [r0 release];
    asm{ movz       w2, #0x0 };
    [self setHighlighted:arg2];
    r0 = [NSNotificationCenter defaultCenter];
    r0 = [r0 retain];
    r20 = r0;
    r3 = **(int32_t *)UIMenuControllerWillHideMenuNotification;
    asm{ movz       x4, #0x0 };
    [r0 removeObserver:self name:r3 object:STK-1];
    [r20 release];
    r0 = [UIMenuController sharedMenuController];
    r0 = [r0 retain];
    r19 = r0;
    asm{ movz       x2, #0x0 };
    [r0 setMenuItems:self];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r19 release];
    return;
}

- (id)operationMenuItems
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x10;
    r21 = *(int32_t *)__stack_chk_guard;
    r21 = *(int32_t *)r21;
    *(int32_t *)(r31 + 0x8) = r21;
    r20 = [[self deleteMenuItem] retain];
    *(int32_t *)r31 = r20;
    r0 = [NSArray arrayWithObjects:0x0 count:0x1];
    r19 = [r0 retain];
    r0 = [r20 release];
    if (r21 == *(int32_t *)(r31 + 0x8)) {
            0x0 = 0x20 - 0x20;
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            r0 = [r19 autorelease];
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;
}

- (id)canBecomeFirstResponder
{
    return 0x1;
}

- (id)canPerformAction:(id)arg2 withSender:(id)arg3 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0xd0;
    r19 = arg2;
    r24 = *(int32_t *)__stack_chk_guard;
    r24 = *(int32_t *)r24;
    asm{ stur       x24, [x29, #0xffffffa8] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    asm{ stp        xzr, xzr, [sp, #0x18] };
    asm{ stp        xzr, xzr, [sp, #0x8] };
    r8 = 0x1039ea000;
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x6c8] };
    r0 = *(int32_t *)(self + r8);
    r0 = [r0 retain];
    r20 = r0;
    r22 = [r0 countByEnumeratingWithState:0x8 objects:0x48 count:STK-1];
    if (r22 == 0x0) goto loc_1024d4d48;
    goto loc_1024d4cd4;

loc_1024d4d48:
    asm{ movz       w19, #0x0 };

loc_1024d4d54:
    r0 = [r20 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r24 == r8) {
            r0 = r19;
            0x0 = 0x50 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return r0;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_1024d4cd4:
    r25 = **(int32_t *)(r31 + 0x18);
    r21 = *(int32_t *)(0x103950000 + 0xa18);

loc_1024d4ce4:
    asm{ movz       x27, #0x0 };
    r23 = *(int32_t *)(0x10395b000 + 0xae8);

loc_1024d4cec:
    if (**(int32_t *)(r31 + 0x18) != r25) {
            objc_enumerationMutation(r20);
    }
    r8 = *(int32_t *)(r31 + 0x10);
    if (objc_msgSend(*(int32_t *)(r8 + r27 * 0x8), r23) == r19) goto loc_1024d4d50;
    goto loc_1024d4d1c;

loc_1024d4d50:
    r19 = 0x1;
    goto loc_1024d4d54;

loc_1024d4d1c:
    r27 = r27 + 0x1;
    if (r27 < r22) goto loc_1024d4cec;
    r22 = objc_msgSend(r20, r21);
    if (r22 != 0x0) goto loc_1024d4ce4;
    goto loc_1024d4d48;
}

- (id)forwardMenuItem
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [UIMenuItem alloc];
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getStringForCurLanguage:0x103267000 defaultTo:@"MessageContent_Forward"];
    r22 = [r0 retain];
    r19 = [r19 initWithTitle:r22 action:@selector(onForward:)];
    [r22 release];
    [r21 release];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 autorelease];
    return r0;
}

- (void)onForward:(id)arg2 
{
    r0 = [self doForward];
    return;
}

- (id)canShowForwardMenuItem
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r21 = self;
    r20 = @selector(viewModel);
    r0 = [self viewModel];
    r0 = [r0 retain];
    r23 = r0;
    r19 = @selector(messageWrap);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r22 = @selector(m_uiMessageType);
    r25 = [r0 m_uiMessageType];
    [r0 release];
    [r23 release];
    if (r25 != 0x2a) goto loc_1024d4f90;
    goto loc_1024d4f08;

loc_1024d4f90:
    r0 = [r21 viewModel];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 messageWrap];
    r29 = 0x40;
    r0 = [r0 retain];
    r22 = [r0 m_uiMessageType];
    [r0 release];
    [r23 release];
    if (r22 != 0x31) goto loc_1024d503c;
    goto loc_1024d4fe0;

loc_1024d503c:
    r22 = [[MMServiceCenter defaultCenter] retain];
    r2 = [AppDataMgr class];
    r23 = [[r22 getService:r2] retain];
    r0 = [r21 viewModel];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 messageWrap];
    r21 = [r0 retain];
    r19 = [r23 isCanForward:r21];
    [r21 release];
    [r20 release];
    [r23 release];
    r0 = r22;

loc_1024d50f0:
    [r0 release];

loc_1024d50f4:
    r0 = r19;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    return r0;

loc_1024d4fe0:
    r0 = objc_msgSend(r21, r20);
    r0 = [r0 retain];
    r22 = r0;
    r0 = objc_msgSend(r0, r19);
    r29 = r29;
    r0 = [r0 retain];
    r24 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    [r22 release];
    if (r24 != 0x17) goto loc_1024d503c;
    asm{ movz       w19, #0x0 };
    goto loc_1024d50f4;

loc_1024d4f08:
    r22 = [CContact alloc];
    r0 = objc_msgSend(r21, r20);
    r0 = [r0 retain];
    r20 = r0;
    r0 = objc_msgSend(r0, r19);
    r19 = [r0 retain];
    r21 = [r22 initWithShareCardMsgWrap:r19];
    [r19 release];
    [r20 release];
    r19 = [r21 isBrandContact];
    r0 = r21;
    goto loc_1024d50f0;
}

- (id)favoriteMenuItem
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [UIMenuItem alloc];
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getStringForCurLanguage:0x10327a000 defaultTo:@"Favorites_Add"];
    r22 = [r0 retain];
    r19 = [r19 initWithTitle:r22 action:@selector(onFavorite:)];
    [r22 release];
    [r21 release];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 autorelease];
    return r0;
}

- (void)onFavorite:(id)arg2 
{
    r0 = [self doFavorite];
    return;
}

- (id)canShowFavoriteMenuItem
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r0 = [self viewModel];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r19 = [[r0 m_nsFromUsr] retain];
    [r0 release];
    [r22 release];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 m_nsToUsr];
    r20 = [r0 retain];
    [r22 release];
    [r21 release];
    r21 = @selector(IsQQContact:);
    if (([MMKernelUtil IsQQContact:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d54f0;
    goto loc_1024d52fc;

loc_1024d54f0:
    asm{ movz       w21, #0x0 };

loc_1024d54f4:
    [r20 release];
    [r19 release];
    r0 = r21;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return r0;

loc_1024d52fc:
    r0 = *(int32_t *)(0x1039c4000 + 0x1f8);
    if (([r0 IsQQContact:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d54f0;
    r0 = *(int32_t *)(0x1039c4000 + 0x1f8);
    r21 = @selector(IsSXContact:);
    if (([r0 IsSXContact:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d54f0;
    r0 = *(int32_t *)(0x1039c4000 + 0x1f8);
    if (([r0 IsSXContact:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d54f0;
    r0 = *(int32_t *)(0x1039c4000 + 0x1f8);
    r21 = @selector(IsBottleContact:);
    if (([r0 IsBottleContact:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d54f0;
    r0 = *(int32_t *)(0x1039c4000 + 0x1f8);
    if (([r0 IsBottleContact:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d54f0;
    r0 = *(int32_t *)(0x1039c4000 + 0x1f8);
    r21 = @selector(IsFBFriend:);
    if (([r0 IsFBFriend:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d54f0;
    r0 = *(int32_t *)(0x1039c4000 + 0x1f8);
    if (([r0 IsFBFriend:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d54f0;
    r24 = @selector(defaultCenter);
    r21 = [[MMServiceCenter defaultCenter] retain];
    r25 = @selector(class);
    [CContactMgr class];
    r26 = @selector(getService:);
    r0 = [r21 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    r27 = @selector(getContactByName:);
    r0 = [r0 getContactByName:r2];
    r29 = 0x50;
    r0 = [r0 retain];
    r23 = r0;
    r28 = @selector(m_isPlugin);
    if (([r0 m_isPlugin] & 0x1 << 0x0) == 0x0) goto loc_1024d5450;
    goto loc_1024d5434;

loc_1024d5450:
    r24 = [[MMServiceCenter defaultCenter] retain];
    [CContactMgr class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r25 = r0;
    r0 = [r0 getContactByName:r2];
    r0 = [r0 retain];
    r27 = [r0 m_isPlugin];
    [r0 release];
    [r25 release];
    [r24 release];
    [r23 release];
    [r22 release];
    [r21 release];
    if ((r27 & 0x1 << 0x0) != 0x0) {
            asm{ movz       w21, #0x0 };
    }
    else {
            r21 = 0x1;
    }
    goto loc_1024d54f4;

loc_1024d5434:
    [r23 release];
    [r22 release];
    [r21 release];
    goto loc_1024d54f0;
}

- (id)deleteMenuItem
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [UIMenuItem alloc];
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getStringForCurLanguage:0x103377000 defaultTo:@"Emoticon_Delete"];
    r22 = [r0 retain];
    r19 = [r19 initWithTitle:r22 action:@selector(onDelete:)];
    [r22 release];
    [r21 release];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 autorelease];
    return r0;
}

- (void)onDelete:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x20;
    *(int32_t *)(r31 + 0x18) = self;
    *(int32_t *)(r31 + 0x8) = [WCActionSheet alloc];
    r19 = [[MMServiceCenter defaultCenter] retain];
    *(int32_t *)(r31 + 0x10) = r19;
    r2 = [MMLanguageMgr class];
    r0 = [r19 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    r23 = [[r0 getStringForCurLanguage:0x103377000 defaultTo:@"Message_Confirm_Delete_Message"] retain];
    r24 = [[MMServiceCenter defaultCenter] retain];
    r0 = [r24 getService:[MMLanguageMgr class]];
    r0 = [r0 retain];
    r21 = r0;
    r19 = [[r0 getStringForCurLanguage:0x103268000 defaultTo:@"Common_Cancel"] retain];
    r25 = [[MMServiceCenter defaultCenter] retain];
    r0 = [r25 getService:[MMLanguageMgr class]];
    r0 = [r0 retain];
    r26 = r0;
    r27 = [[r0 getStringForCurLanguage:0x10325c000 defaultTo:@"Common_Confirm"] retain];
    asm{ movz       x6, #0x0 };
    r0 = *(int32_t *)(r31 + 0x8);
    r20 = *(int32_t *)(r31 + 0x18);
    r28 = [r0 initWithTitle:r23 delegate:r20 cancelButtonTitle:STK1 destructiveButtonTitle:STK0 otherButtonTitles:STK-1];
    [r27 release];
    [r26 release];
    [r25 release];
    [r19 release];
    [r21 release];
    [r24 release];
    [r23 release];
    [r22 release];
    r0 = *(int32_t *)(r31 + 0x10);
    [r0 release];
    asm{ movz       w2, #0x3e9 };
    [r28 setTag:r23];
    [r28 showInView:r20];
    0x0 = 0x50 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r28 release];
    return;
}

- (id)canShowDeleteMenuItem
{
    return 0x1;
}

- (id)revokeMsgMenuItem
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [UIMenuItem alloc];
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getStringForCurLanguage:0x103377000 defaultTo:@"MessageContent_Revoke"];
    r22 = [r0 retain];
    r19 = [r19 initWithTitle:r22 action:@selector(onRevokeMsg:)];
    [r22 release];
    [r21 release];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 autorelease];
    return r0;
}

- (void)onRevokeMsg:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x354] };
    r21 = r20 + 0x1039ea000;
    r0 = objc_loadWeakRetained(r21);
    r22 = r0;
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r19 = @selector(revokeMsgByNodeView:);
            r24 = [r0 respondsToSelector:r19];
            [r0 release];
            r0 = [r22 release];
            if (r24 != 0x0) {
                    r21 = objc_loadWeakRetained(r21);
                    r0 = [r20 viewModel];
                    r0 = [r0 retain];
                    r20 = r0;
                    r0 = [r0 messageWrap];
                    r22 = [r0 retain];
                    [r21 revokeMsgByNodeView:r2];
                    [r22 release];
                    [r20 release];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r21 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (id)canShowRevokeMsgMenuItem
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r19 = self;
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMConfigMgr class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r23 = [r0 uintFromDynamicConfigForKey:@"ShowRevokeMsgEntry"];
    [r0 release];
    [r20 release];
    r20 = [CAppUtil genCurrentTime];
    r21 = @selector(viewModel);
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r24 = r0;
    r25 = @selector(messageWrap);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r22 = [r0 m_uiCreateTime];
    [r0 release];
    [r24 release];
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r26 = [r0 msgStatus];
    [r0 release];
    if (r23 == 0x1) {
            asm{ nop         };
            asm{ ldrsw      x8, [x8, #0x354] };
            r23 = objc_loadWeakRetained(r19 + 0x1039ea000);
            r0 = [r19 viewModel];
            r0 = [r0 retain];
            r24 = r0;
            r0 = [r0 messageWrap];
            r29 = 0x50;
            r25 = [r0 retain];
            if ([r23 isMsgCanRevoke:r25] != 0x0) {
                    if (r26 != 0x4) {
                            asm{ movz       w27, #0x0 };
                            if ((r26 | 0x1) == 0x3) {
                                    r0 = [r19 viewModel];
                                    r0 = [r0 retain];
                                    r19 = r0;
                                    r0 = [r0 isSender];
                                    asm{ cset       w8, hi };
                                    asm{ cset       w9, lo };
                                    r27 = r9 & r22 + 0x78 & r0;
                                    [r19 release];
                            }
                    }
                    else {
                            r0 = [r19 viewModel];
                            r0 = [r0 retain];
                            r19 = r0;
                            r0 = [r0 isSender];
                            asm{ cset       w8, hi };
                            asm{ cset       w9, lo };
                            r27 = r9 & r22 + 0x78 & r0;
                            [r19 release];
                    }
            }
            else {
                    asm{ movz       w27, #0x0 };
            }
            [r25 release];
            [r24 release];
            [r23 release];
    }
    else {
            asm{ movz       w27, #0x0 };
    }
    r0 = r27;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return r0;
}

- (id)shareMsgToOpenSDKMenuItem
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [UIMenuItem alloc];
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getStringForCurLanguage:0x10327a000 defaultTo:@"ShareActionSheet_MsgForward"];
    r22 = [r0 retain];
    r19 = [r19 initWithTitle:r22 action:@selector(onShareMsgToOpenSDK:)];
    [r22 release];
    [r21 release];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 autorelease];
    return r0;
}

- (void)onShareMsgToOpenSDK:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x354] };
    r21 = r20 + 0x1039ea000;
    r0 = objc_loadWeakRetained(r21);
    r22 = r0;
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r19 = @selector(shareMsgToOpenSDKByNodeView:);
            r24 = [r0 respondsToSelector:r19];
            [r0 release];
            r0 = [r22 release];
            if (r24 != 0x0) {
                    r21 = objc_loadWeakRetained(r21);
                    r0 = [r20 viewModel];
                    r0 = [r0 retain];
                    r20 = r0;
                    r0 = [r0 messageWrap];
                    r22 = [r0 retain];
                    [r21 shareMsgToOpenSDKByNodeView:r2];
                    [r22 release];
                    [r20 release];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r21 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (id)canShowSendTo3rdApp
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r0 = [self viewModel];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 messageWrap];
    r21 = [r0 retain];
    r19 = [ShareDataToOpenSDKController canSendTo3rdAppWithMessageWrap:r21];
    [r21 release];
    [r20 release];
    r0 = r19;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return r0;
}

- (id)canShowSendToDevices
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [WCLanDeviceMsgForwardMgr class];
    r21 = [[r19 getService:r2] retain];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 messageWrap];
    r22 = [r0 retain];
    r23 = [r21 hasAvailableDeviceInMessageWrap:r22];
    [r22 release];
    [r20 release];
    [r21 release];
    [r19 release];
    r0 = r23;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return r0;
}

- (id)canShowShareMsgToOpenSDKMenuItem
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r19 = self;
    if (([self canShowSendTo3rdApp] & 0x1 << 0x0) != 0x0) {
            r0 = 0x1;
    }
    else {
            r0 = [r19 canShowSendToDevices];
    }
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return r0;
}

- (UIMenuItem)restoreMenuItem
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [UIMenuItem alloc];
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getStringForCurLanguage:0x10332c000 defaultTo:@"SyncPhoneContact_Restore"];
    r22 = [r0 retain];
    r19 = [r19 initWithTitle:r22 action:@selector(onRestore:)];
    [r22 release];
    [r21 release];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 autorelease];
    return r0;
}

- (void)onRestore:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r0 = [self viewModel];
    r0 = [r0 retain];
    r22 = r0;
    r23 = [[r0 cpKeyForChatRoomMessage] retain];
    [MMCPUtil clearCrashCountWithKey:r23];
    [r23 release];
    [r22 release];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r21 = r0;
    [r0 updateCrashProtectedState];
    [r21 release];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r19 = r0;
    [r0 updateLayouts];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (id)moreMenuItem
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [UIMenuItem alloc];
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getStringForCurLanguage:0x103267000 defaultTo:@"MsgNode_MoreOperate"];
    r22 = [r0 retain];
    r19 = [r19 initWithTitle:r22 action:@selector(onMore:)];
    [r22 release];
    [r21 release];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 autorelease];
    return r0;
}

- (void)onMore:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r0 = [self viewModel];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 m_uiMesLocalID];
    *(int32_t *)r31 = r0;
    r0 = [NSString stringWithFormat:@"%u", r3];
    r20 = [r0 retain];
    [r22 release];
    [r21 release];
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x354] };
    r19 = self + 0x1039ea000;
    r22 = objc_loadWeakRetained(r19);
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = @selector(onMoreOperateWithMsgId:);
            r24 = [r0 respondsToSelector:r21];
            [r0 release];
            [r22 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r19 = r0;
                    [r0 onMoreOperateWithMsgId:r2];
                    [r19 release];
            }
    }
    0x0 = 0x30 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r20 release];
    return;
}

- (id)canShowMoreMenuItem
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x20;
    r0 = [self viewModel];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r19 = [[r0 m_nsFromUsr] retain];
    [r0 release];
    [r22 release];
    r0 = [self viewModel];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 m_nsToUsr];
    r29 = 0x50;
    r20 = [r0 retain];
    [r22 release];
    [r21 release];
    r21 = @selector(IsQQContact:);
    if (([MMKernelUtil IsQQContact:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d6720;
    goto loc_1024d652c;

loc_1024d6720:
    asm{ movz       w21, #0x0 };

loc_1024d6724:
    [r20 release];
    [r19 release];
    r0 = r21;
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return r0;

loc_1024d652c:
    r0 = *(int32_t *)(0x1039c4000 + 0x1f8);
    if (([r0 IsQQContact:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d6720;
    r0 = *(int32_t *)(0x1039c4000 + 0x1f8);
    r21 = @selector(IsSXContact:);
    if (([r0 IsSXContact:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d6720;
    r0 = *(int32_t *)(0x1039c4000 + 0x1f8);
    if (([r0 IsSXContact:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d6720;
    r0 = *(int32_t *)(0x1039c4000 + 0x1f8);
    r21 = @selector(IsBottleContact:);
    if (([r0 IsBottleContact:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d6720;
    r0 = *(int32_t *)(0x1039c4000 + 0x1f8);
    if (([r0 IsBottleContact:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d6720;
    r0 = *(int32_t *)(0x1039c4000 + 0x1f8);
    r21 = @selector(IsFBFriend:);
    if (([r0 IsFBFriend:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d6720;
    r0 = *(int32_t *)(0x1039c4000 + 0x1f8);
    if (([r0 IsFBFriend:r2] & 0x1 << 0x0) != 0x0) goto loc_1024d6720;
    r24 = @selector(defaultCenter);
    r21 = [[MMServiceCenter defaultCenter] retain];
    r26 = @selector(class);
    [CContactMgr class];
    r27 = @selector(getService:);
    r0 = [r21 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    r28 = @selector(getContactByName:);
    r0 = [r0 getContactByName:r2];
    r29 = 0x50;
    r0 = [r0 retain];
    r23 = r0;
    r25 = @selector(m_isPlugin);
    if (([r0 m_isPlugin] & 0x1 << 0x0) == 0x0) goto loc_1024d667c;
    goto loc_1024d6664;

loc_1024d667c:
    *(int32_t *)(r31 + 0x18) = r21;
    r21 = [[MMServiceCenter defaultCenter] retain];
    *(int32_t *)(r31 + 0x10) = r21;
    [CContactMgr class];
    r0 = [r21 getService:r2];
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x8) = r0;
    r0 = [r0 getContactByName:r2];
    r29 = r29;
    r0 = [r0 retain];
    r21 = r0;
    if (([r0 m_isPlugin] & 0x1 << 0x0) == 0x0) goto loc_1024d6758;
    goto loc_1024d66f0;

loc_1024d6758:
    r24 = [[MMServiceCenter defaultCenter] retain];
    [CContactMgr class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r25 = r0;
    r0 = [r0 getContactByName:r2];
    r29 = r29;
    r0 = [r0 retain];
    r27 = [r0 isHolderContact];
    [r0 release];
    [r25 release];
    [r24 release];
    [r21 release];
    r0 = *(int32_t *)(r31 + 0x8);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x10);
    [r0 release];
    [r23 release];
    [r22 release];
    r0 = *(int32_t *)(r31 + 0x18);
    [r0 release];
    if ((r27 & 0x1 << 0x0) == 0x0) {
            r21 = 0x1;
    }
    else {
            asm{ movz       w21, #0x0 };
    }
    goto loc_1024d6724;

loc_1024d66f0:
    [r21 release];
    r0 = *(int32_t *)(r31 + 0x8);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x10);
    [r0 release];
    [r23 release];
    [r22 release];
    r0 = *(int32_t *)(r31 + 0x18);

loc_1024d671c:
    [r0 release];
    goto loc_1024d6720;

loc_1024d6664:
    [r23 release];
    [r22 release];
    r0 = r21;
    goto loc_1024d671c;
}

- (void)actionSheet:(id)arg2 clickedButtonAtIndex:(id)arg3 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r21 = arg3;
    r20 = self;
    r19 = [arg2 retain];
    if ((r21 != -0x1) && ([r19 tag] == 0x3e9)) {
            if ([r19 cancelButtonIndex] != r21) {
                    asm{ nop         };
                    asm{ ldrsw      x8, [x8, #0x354] };
                    r23 = objc_loadWeakRetained(r20 + 0x1039ea000);
                    r0 = [r20 viewModel];
                    r0 = [r0 retain];
                    r24 = r0;
                    r25 = [[r0 messageWrap] retain];
                    [r23 deleteNode:r25];
                    [r25 release];
                    [r24 release];
                    [r23 release];
                    r23 = [[MMServiceCenter defaultCenter] retain];
                    r2 = [GameStatMgr class];
                    r24 = [[r23 getService:r2] retain];
                    r0 = [r20 viewModel];
                    r0 = [r0 retain];
                    r20 = r0;
                    r0 = [r0 messageWrap];
                    r21 = [r0 retain];
                    [r24 statDeleteMsgInConversation:r21];
                    [r21 release];
                    [r20 release];
                    [r24 release];
                    [r23 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

@end
