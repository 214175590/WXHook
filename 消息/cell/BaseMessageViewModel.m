//
//  BaseMessageViewModel.m
//
//  Generated by Class Decompile.
//  Repository is https://github.com/poboke/Class-Decompile
//  Copyright Â© 2016 www.poboke.com. All rights reserved.
//

@implementation BaseMessageViewModel

+ (void)registerMessageViewModelClass:(id)arg2 
{
    r0 = *(int32_t *)0x103b15730;
    r0 = [r0 addObject:arg2];
    return;
}

+ (void)initMessageViewModelClassList
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r0 = [NSMutableArray alloc];
    r0 = [r0 init];
    r8 = *(int32_t *)0x103b15730;
    *(int32_t *)0x103b15730 = r0;
    [r8 release];
    r2 = NSClassFromString(@"MultiColumnReaderMessageViewModel");
    [self registerMessageViewModelClass:r2];
    [self registerMessageViewModelClass:NSClassFromString(@"ImageTextReaderMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AttributedReaderMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"MultiReaderMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"VideoReaderMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"ReaderMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"SystemMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"MailMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"MassSendMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"ImageMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"VoiceMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"VideoMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"ShareCardMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"EmoticonMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"GameMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"LocationMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"VoipContentViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"MultiTalkMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AppImageMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AppEmoticonMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AppFileMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AppUrlMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"VoiceReminderConfirmViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"VoiceReminderRemindViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AppProductMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AppWCCardMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AppGiftCardMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AppTrackRoomMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AppRecordMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AppNoteMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AppMusicMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AppHardWareRankMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AppHardWareNotifyMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"WAAppPageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"WAAppProfileViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"WAAppMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"WCPayTransferMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"WCPayC2CMessageViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"WCPayC2CFestivalMsgViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"WCPayC2CAAUnPayNotifyViewModel")];
    [self registerMessageViewModelClass:NSClassFromString(@"AppDefaultMessageViewModel")];
    r2 = NSClassFromString(@"TextMessageViewModel");
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [self registerMessageViewModelClass:r2];
    return;
}

+ (id)createMessageViewModelWithMessageWrap:(id)arg2 contact:(id)arg3 chatContact:(id)arg4 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0xe0;
    r22 = self;
    r26 = *(int32_t *)__stack_chk_guard;
    r26 = *(int32_t *)r26;
    asm{ stur       x26, [x29, #0xffffffa8] };
    r19 = [arg2 retain];
    r20 = [arg3 retain];
    r21 = [r4 retain];
    r23 = 0x103b15000;
    r0 = *(int32_t *)0x103b15730;
    if (r0 == 0x0) {
            r23 = 0x103b15000;
            r8 = 0x1039a5000;
            [r22 initMessageViewModelClassList];
            r0 = *(int32_t *)(r23 + 0x730);
    }
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    asm{ stp        xzr, xzr, [sp, #0x18] };
    r0 = [r0 retain];
    r22 = r0;
    r24 = [r0 countByEnumeratingWithState:0x18 objects:0x58 count:STK-1];
    asm{ movz       x23, #0x0 };
    if (r24 == 0x0) goto loc_101f39cec;
    goto loc_101f39c1c;

loc_101f39cec:
    [r22 release];
    [r21 release];
    [r20 release];
    r0 = [r19 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r26 == r8) {
            0x0 = 0x50 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            r0 = [r23 autorelease];
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_101f39c1c:
    *(int32_t *)(r31 + 0x10) = r20;
    r28 = **(int32_t *)(r31 + 0x28);
    r23 = *(int32_t *)(0x103950000 + 0xa18);

loc_101f39c30:
    asm{ movz       x27, #0x0 };
    r25 = *(int32_t *)(0x1039a5000 + 0xd60);

loc_101f39c38:
    if (**(int32_t *)(r31 + 0x28) != r28) {
            objc_enumerationMutation(r22);
    }
    r8 = *(int32_t *)(r31 + 0x20);
    r26 = *(int32_t *)(r8 + r27 * 0x8);
    if (objc_msgSend(r26, r25) != 0x0) goto loc_101f39cb0;
    goto loc_101f39c6c;

loc_101f39cb0:
    r0 = [r26 alloc];
    r8 = 0x103994000;
    r20 = *(int32_t *)(r31 + 0x10);
    r23 = [r0 initWithMessageWrap:r19 contact:r20 chatContact:STK-1];
    r26 = *(int32_t *)__stack_chk_guard;
    r26 = *(int32_t *)r26;
    goto loc_101f39cec;

loc_101f39c6c:
    r27 = r27 + 0x1;
    if (r27 < r24) goto loc_101f39c38;
    r24 = objc_msgSend(r22, r23);
    if (r24 != 0x0) goto loc_101f39c30;
    asm{ movz       x23, #0x0 };
    r26 = *(int32_t *)__stack_chk_guard;
    r26 = *(int32_t *)r26;
    r20 = *(int32_t *)(r31 + 0x10);
    goto loc_101f39cec;
}

+ (id)canCreateMessageViewModelWithMessageWrap:(id)arg2 
{
    r0 = self;
    asm{ movz       w0, #0x0 };
    return r0;
}

- (id)initWithMessageWrap:(id)arg2 contact:(id)arg3 chatContact:(id)arg4 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r29 = 0x40;
    0x0 = 0x0 - 0x10;
    r22 = self;
    r19 = [arg2 retain];
    r20 = [arg3 retain];
    *(int32_t *)r31 = r22;
    *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d4360;
    r21 = [[0x0 super] initWithChatContact:r4];
    if (r21 != 0x0) {
            [r21 setModelType:0x1];
            [r21 setIsShowStatusView:0x1];
            asm{ ldrsw      x25, [x8, #0xd08] };
            r0 = [r19 retain];
            r8 = *(int32_t *)(r21 + r25);
            *(int32_t *)(r21 + r25) = r0;
            [r8 release];
            asm{ ldrsw      x22, [x8, #0xd0c] };
            r0 = [r20 retain];
            r8 = *(int32_t *)(r21 + r22);
            *(int32_t *)(r21 + r22) = r0;
            [r8 release];
            r2 = *(int32_t *)(r21 + r25);
            r0 = [CMessageWrap isSenderFromMsgWrap:r2];
            asm{ ldrsw      x8, [x8, #0xd10] };
            *(int8_t *)(r21 + 0x1039ea000) = r0;
            [r21 updateCrashProtectedState];
            r23 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMExtensionCenter class];
            r0 = [r23 getService:r2];
            r0 = [r0 retain];
            r24 = r0;
            r0 = [r0 getExtension:@protocol(IMessageNodeStatusExt)];
            r29 = 0x40;
            r22 = [r0 retain];
            [r24 release];
            [r23 release];
            if (r22 != 0x0) {
                    r0 = *(int32_t *)(r21 + r25);
                    r2 = [r0 m_uiMesLocalID];
                    r0 = [NSNumber numberWithUnsignedInt:r2];
                    r29 = r29;
                    r23 = [r0 retain];
                    [r22 registerExtension:r21 forKey:r23];
                    [r23 release];
            }
            [r22 release];
    }
    [r20 release];
    [r19 release];
    r0 = r21;
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    return r0;
}

- (void)dealloc
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x10;
    r19 = self;
    r21 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMExtensionCenter class];
    r0 = [r21 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 getExtension:@protocol(IMessageNodeStatusExt)];
    r29 = 0x20;
    r20 = [r0 retain];
    [r22 release];
    [r21 release];
    if (r20 != 0x0) {
            asm{ ldrsw      x8, [x8, #0xd08] };
            r0 = *(int32_t *)(r19 + 0x1039ea000);
            r2 = [r0 m_uiMesLocalID];
            r0 = [NSNumber numberWithUnsignedInt:r2];
            r29 = 0x20;
            r21 = [r0 retain];
            [r20 unregisterExtension:r19 forKey:r21];
            [r21 release];
    }
    [r20 release];
    *(int32_t *)r31 = r19;
    *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d4360;
    r0 = [[0x0 super] dealloc];
    0x0 = r29 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (id)accessibilityDescription
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x50;
    r20 = self;
    r0 = [NSMutableString string];
    r28 = [r0 retain];
    [@"" retain];
    if ([r20 isSender] != 0x0) {
            r21 = @selector(defaultCenter);
            r25 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMLanguageMgr class];
            r0 = [r25 getService:r2];
            r0 = [r0 retain];
            r26 = r0;
            r27 = [[r0 getStringForCurLanguage:0x10334a000 defaultTo:@"VoiceOver_BaseMsgNode_MySelf_AccessibilityDescrible"] retain];
            [r28 appendString:r27];
            [r27 release];
            [r26 release];
            [r25 release];
            r25 = [[MMServiceCenter defaultCenter] retain];
            r0 = [r25 getService:[MMLanguageMgr class]];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 getStringForCurLanguage:0x10334a000 defaultTo:@"VoiceOver_BaseMsgNode_MySelfSend_AccessibilityDescrible"];
            r29 = 0x50;
            r26 = [r0 retain];
            [@"" release];
            [r22 release];
            r0 = r25;
    }
    else {
            r0 = [r20 chatRoomDisplayName];
            r29 = 0x50;
            r0 = [r0 retain];
            r22 = r0;
            if ([r0 length] != 0x0) {
                    *(int32_t *)r31 = r22;
                    [r28 appendFormat:@"%@"];
                    r23 = [[MMServiceCenter defaultCenter] retain];
                    r2 = [MMLanguageMgr class];
                    r0 = [r23 getService:r2];
                    r0 = [r0 retain];
                    r24 = r0;
                    r0 = [r0 getStringForCurLanguage:0x10334a000 defaultTo:@"VoiceOver_BaseMsgNode_OthersSend_AccessibilityDescrible"];
                    r29 = r29;
                    r26 = [r0 retain];
                    [@"" release];
                    [r24 release];
                    [r23 release];
            }
            else {
                    r26 = @"";
            }
            r0 = r22;
    }
    [r0 release];
    asm{ ldrsw      x21, [x8, #0xd08] };
    r0 = *(int32_t *)(r20 + r21);
    r0 = [r0 m_uiMessageType];
    r8 = r0 - 0x22;
    if (r8 > 0xe) goto loc_101f3a3dc;
    goto loc_101f3a350;

loc_101f3a3dc:
    r19 = r28;
    if (r0 == 0x3e) goto loc_101f3a9f8;
    goto loc_101f3a3e8;

loc_101f3a9f8:
    r22 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r22 getService:r2];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 getStringForCurLanguage:0x10334a000 defaultTo:@"VoiceOver_BaseMsgNode_VideoNode_AccessibilityDescrible"];
    r29 = r29;

loc_101f3aa68:
    r24 = [r0 retain];
    asm{ stp        x26, x24, [sp] };
    [r19 appendFormat:@"%@%@"];
    [r24 release];
    [r23 release];
    [r22 release];

loc_101f3aaa4:
    r0 = [r20 additionalAccessibilityDescription];
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    if ([r0 length] != 0x0) {
            [r19 appendString:r20];
    }
    r22 = objc_retainAutoreleaseReturnValue(r19);
    [r20 release];
    [r26 release];
    [r19 release];
    r0 = r22;
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return r0;

loc_101f3a3e8:
    if (r0 != 0x3) goto loc_101f3aaa4;
    r22 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r22 getService:r2];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 getStringForCurLanguage:0x103300000 defaultTo:@"VoiceOver_BaseMsgNode_ImageNode_AccessibilityDescrible"];
    r29 = r29;
    goto loc_101f3aa68;

loc_101f3a350:
    asm{ nop         };
    asm{ ldrsw      x8, [x9, x8, lsl #2] };
    r19 = r28;
    asm{ br         x8 };
    r22 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r22 getService:r2];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 getStringForCurLanguage:0x10334a000 defaultTo:@"VoiceOver_BaseMsgNode_VideoNode_AccessibilityDescrible"];
    r29 = r29;
    goto loc_101f3aa68;
}

- (id)additionalAccessibilityDescription
{
    r0 = self;
    asm{ movz       x0, #0x0 };
    return r0;
}

- (void)updateCrashProtectedState
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd08] };
    r2 = *(int32_t *)(self + 0x1039ea000);
    r0 = [MMCPUtil cpKeyForMessageWrap:r2];
    r0 = [r0 retain];
    asm{ ldrsw      x20, [x8, #0xd14] };
    r8 = *(int32_t *)(self + r20);
    *(int32_t *)(self + r20) = r0;
    [r8 release];
    r2 = *(int32_t *)(self + r20);
    r0 = [MMCPUtil isUnsafeWithKey:r2];
    asm{ ldrsw      x8, [x8, #0xd18] };
    *(int8_t *)(self + 0x1039ea000) = r0;
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0xcd0] };
    r0 = *(int32_t *)(self + 0x1039ee000);
    r23 = [[r0 m_nsUsrName] retain];
    asm{ ldrsw      x8, [x8, #0xd0c] };
    r22 = [[*(int32_t *)(self + 0x1039ea000) m_nsUsrName] retain];
    r0 = [MMCPUtil cpKeyForChatRoomDisplayName:r23 userName:r22];
    r0 = [r0 retain];
    asm{ ldrsw      x21, [x8, #0xd1c] };
    r8 = *(int32_t *)(self + MMCPUtil);
    *(int32_t *)(self + MMCPUtil) = r0;
    [r8 release];
    [r22 release];
    [r23 release];
    r0 = [MMCPUtil isUnsafeWithKey:*(int32_t *)(self + MMCPUtil)];
    asm{ ldrsw      x8, [x8, #0xd20] };
    *(int8_t *)(self + 0x1039ea000) = r0;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return;
}

- (id)isShowSendOKView
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r20 = self;
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMConfigMgr class];
    r0 = [r19 getService:r2];
    r0 = [r0 retain];
    r21 = r0;
    if (([r0 uintFromDynamicConfigForKey:@"ShowSendOK"] != 0x1) || ([r20 isSender] == 0x0)) {
            asm{ movz       w20, #0x0 };
    }
    else {
            asm{ ldrsw      x8, [x8, #0xd08] };
            r0 = *(int32_t *)(r20 + 0x1039ea000);
            r20 = [r0 isSentOK];
    }
    [r21 release];
    [r19 release];
    r0 = r20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return r0;
}

- (void)updateContentViewHeight:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0xcd4] };
    *(int32_t *)(self + 0x1039ee000) = 0x0;
    asm{ ldrsw      x8, [x8, #0xd24] };
    *(int32_t *)(0x8 + self + 0x1039ea000) = d0;
    r22 = [[self delegate] retain];
    r25 = [[self messageWrap] retain];
    [NSObject safeCancelPreviousPerformRequestsWithTarget:r22 selector:@selector(reloadNodeWithMessageWrap:) object:STK-1];
    [r25 release];
    [r22 release];
    r20 = [[self delegate] retain];
    r0 = [self messageWrap];
    r19 = [r0 retain];
    [r20 safePerformSelector:@selector(reloadNodeWithMessageWrap:) withObject:r19 afterDelay:STK-1];
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r20 release];
    return;
}

- (void)resetLayoutCache
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    *(int32_t *)(r31 + 0xfffffffffffffff0) = self;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d4360;
    r0 = [[0x0 super] resetLayoutCache];
    asm{ ldrsw      x8, [x8, #0xd24] };
    *(int32_t *)(self + 0x1039ea000) = **(int32_t *)CGSizeZero;
    0x0 = 0x10 - 0x10;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return;
}

- (id)measure:(id)arg2 
{
    r2 = arg2;
    asm{ stp        d9, d8, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd24] };
    r20 = r19 + 0x1039ea000;
    asm{ ldp        d8, d9, [x20] };
    asm{ ldp        d2, d3, [x8] };
    asm{ fcmp       d8, d2 };
    asm{ fccmp      d9, d3, #0x0, eq };
    if (CPU_FLAGS & NE) {
            [r19 measureContentViewSize:r2];
            *(int32_t *)r20 = d8;
            *(int32_t *)(r20 + 0x8) = d9;
    }
    r0 = [r19 isTailPart];
    if (r0 != 0x0) {
            asm{ nop         };
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 getValueOfProperty:@"content_sepm_margin" inRuleSet:@"#message_content_viewController"];
            r21 = [r0 retain];
            [MMThemeUtil parseFloatFromValues:r21];
            asm{ fadd       d9, d9, d0 };
            [r21 release];
            r0 = [r20 release];
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x40 };
    return r0;
}

- (id)measureContentViewSize:(id)arg2 
{
    r0 = self;
    asm{ ldp        d0, d1, [x8] };
    return r0;
}

- (id)chatRoomDisplayName
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x10;
    r20 = self;
    asm{ ldrsw      x25, [x8, #0xd0c] };
    r19 = *(int32_t *)(r20 + r25);
    r21 = @selector(class);
    [CEnterpriseContact class];
    r22 = @selector(isKindOfClass:);
    if ([r19 isKindOfClass:r2] == 0x0) goto loc_101f3b0b0;
    goto loc_101f3b090;

loc_101f3b0b0:
    r19 = @"";
    [r19 retain];
    asm{ nop         };
    asm{ ldrsw      x24, [x8, #0xcd0] };
    r23 = *(int32_t *)(r20 + r24);
    [CContact class];
    if ([r23 isKindOfClass:r2] != 0x0) {
            r0 = *(int32_t *)(r20 + r24);
            r2 = *(int32_t *)(r20 + r25);
            r0 = [r0 getChatRoomMemberDisplayName:r2];
            r29 = 0x50;
            r19 = [r0 retain];
            [@"" release];
    }
    r0 = *(int32_t *)(r20 + r24);
    if ([r0 isLbsroom] == 0x0) goto loc_101f3b2e8;
    goto loc_101f3b134;

loc_101f3b2e8:
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 autorelease];
    return r0;

loc_101f3b134:
    *(int32_t *)(r31 + 0x8) = @selector(defaultCenter);
    r27 = [[MMServiceCenter defaultCenter] retain];
    r2 = [CContactMgr class];
    *(int32_t *)r31 = @selector(getService:);
    r28 = [[r27 getService:r2] retain];
    r0 = *(int32_t *)(r20 + r25);
    r23 = @selector(m_nsUsrName);
    r22 = [[r0 m_nsUsrName] retain];
    r26 = @selector(getContactByName:);
    r0 = [r28 getContactByName:r2];
    r29 = r29;
    r24 = [r0 retain];
    [r22 release];
    [r28 release];
    [r27 release];
    if (r24 == 0x0) goto loc_101f3b218;
    goto loc_101f3b1ec;

loc_101f3b218:
    r22 = [objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x8)) retain];
    [StrangerContactMgr class];
    r27 = [objc_msgSend(r22, *(int32_t *)r31) retain];
    r28 = [[*(int32_t *)(r20 + r25) m_nsUsrName] retain];
    r0 = [r27 getContactByName:r2];
    r29 = r29;
    r23 = [r0 retain];
    [r24 release];
    [r28 release];
    [r27 release];
    [r22 release];
    if (r23 == 0x0) goto loc_101f3b30c;
    goto loc_101f3b2b8;

loc_101f3b30c:
    r22 = [objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x8)) retain];
    [StrangerContactMgr class];
    r21 = [objc_msgSend(r22, *(int32_t *)r31) retain];
    r2 = *(int32_t *)(r20 + r25);
    r0 = [NSArray arrayWithObject:r2];
    r29 = r29;
    r20 = [r0 retain];
    [r21 updateContactFromContact:r20];
    [r20 release];
    [r21 release];
    [r22 release];
    goto loc_101f3b2e8;

loc_101f3b2b8:
    r0 = [r23 getContactDisplayName];
    r29 = r29;
    r20 = [r0 retain];
    [r19 release];
    r0 = r23;

loc_101f3b2e0:
    [r0 release];
    r19 = r20;
    goto loc_101f3b2e8;

loc_101f3b1ec:
    r0 = [r24 getContactDisplayName];
    r29 = r29;
    r20 = [r0 retain];
    [r19 release];
    r0 = r24;
    goto loc_101f3b2e0;

loc_101f3b090:
    r0 = *(int32_t *)(r20 + r25);
    r0 = [r0 m_nsContactDisplayName];
    r29 = 0x50;
    r19 = [r0 retain];
    goto loc_101f3b2e8;
}

- (void)onMessageUpdateStatus
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r0 = [self cellView];
    r0 = [r0 retain];
    r19 = r0;
    [r0 updateNodeStatus];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r19 release];
    return;
}

- (id)contact
{
    asm{ ldrsw      x8, [x8, #0xd0c] };
    r0 = *(int32_t *)(self + 0x1039ea000);
    return r0;
}

- (void)setContact:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x20, [x8, #0xd0c] };
    r0 = [arg2 retain];
    r8 = *(int32_t *)(self + r20);
    *(int32_t *)(self + r20) = r0;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r8 release];
    return;
}

- (id)messageWrap
{
    asm{ ldrsw      x8, [x8, #0xd08] };
    r0 = *(int32_t *)(self + 0x1039ea000);
    return r0;
}

- (void)setMessageWrap:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x20, [x8, #0xd08] };
    r0 = [arg2 retain];
    r8 = *(int32_t *)(self + r20);
    *(int32_t *)(self + r20) = r0;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r8 release];
    return;
}

- (id)isSender
{
    asm{ ldrsw      x8, [x8, #0xd10] };
    r0 = *(int8_t *)(self + 0x1039ea000);
    return r0;
}

- (id)cpKeyForChatRoomMessage
{
    asm{ ldrsw      x8, [x8, #0xd14] };
    r0 = *(int32_t *)(self + 0x1039ea000);
    return r0;
}

- (void)setCpKeyForChatRoomMessage:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x20, [x8, #0xd14] };
    r0 = [arg2 retain];
    r8 = *(int32_t *)(self + r20);
    *(int32_t *)(self + r20) = r0;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r8 release];
    return;
}

- (id)cpKeyForChatRoomDisplayName
{
    asm{ ldrsw      x8, [x8, #0xd1c] };
    r0 = *(int32_t *)(self + 0x1039ea000);
    return r0;
}

- (void)setCpKeyForChatRoomDisplayName:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x20, [x8, #0xd1c] };
    r0 = [arg2 retain];
    r8 = *(int32_t *)(self + r20);
    *(int32_t *)(self + r20) = r0;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r8 release];
    return;
}

- (id)isChatRoomMessageUnsafe
{
    asm{ ldrsw      x8, [x8, #0xd18] };
    r0 = *(int8_t *)(self + 0x1039ea000);
    return r0;
}

- (void)setIsChatRoomMessageUnsafe:(id)arg2 
{
    r0 = self;
    asm{ ldrsw      x8, [x8, #0xd18] };
    *(int8_t *)(r0 + 0x1039ea000) = arg2;
    return;
}

- (id)isChatRoomDisplayNameUnsafe
{
    asm{ ldrsw      x8, [x8, #0xd20] };
    r0 = *(int8_t *)(self + 0x1039ea000);
    return r0;
}

- (void)setIsChatRoomDisplayNameUnsafe:(id)arg2 
{
    r0 = self;
    asm{ ldrsw      x8, [x8, #0xd20] };
    *(int8_t *)(r0 + 0x1039ea000) = arg2;
    return;
}

- (id)contentViewSize
{
    r0 = self;
    asm{ ldrsw      x8, [x8, #0xd24] };
    asm{ ldp        d0, d1, [x8] };
    return r0;
}

- (id)isShowStatusView
{
    asm{ ldrsw      x8, [x8, #0xd28] };
    r0 = *(int8_t *)(self + 0x1039ea000);
    return r0;
}

- (void)setIsShowStatusView:(id)arg2 
{
    r0 = self;
    asm{ ldrsw      x8, [x8, #0xd28] };
    *(int8_t *)(r0 + 0x1039ea000) = arg2;
    return;
}

- (id)highlighted
{
    asm{ ldrsw      x8, [x8, #0xd2c] };
    r0 = *(int8_t *)(self + 0x1039ea000);
    return r0;
}

- (void)setHighlighted:(id)arg2 
{
    r0 = self;
    asm{ ldrsw      x8, [x8, #0xd2c] };
    *(int8_t *)(r0 + 0x1039ea000) = arg2;
    return;
}

- (void).cxx_destruct
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0xd1c] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ea000, _cmd);
    asm{ ldrsw      x8, [x8, #0xd14] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ea000, _cmd);
    asm{ ldrsw      x8, [x8, #0xd08] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ea000, _cmd);
    asm{ movz       x1, #0x0 };
    asm{ ldrsw      x8, [x8, #0xd0c] };
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = objc_storeStrong(self + 0x1039ea000, _cmd);
    return;
}

- (id)msgStatus
{
    asm{ ldrsw      x8, [x8, #0xd08] };
    r0 = *(int32_t *)(self + 0x1039ea000);
    r0 = [r0 m_uiStatus];
    return r0;
}

@end
