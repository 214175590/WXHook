//
//  BaseChatCellView.m
//
//  Generated by Class Decompile.
//  Repository is https://github.com/poboke/Class-Decompile
//  Copyright Â© 2016 www.poboke.com. All rights reserved.
//

@implementation BaseChatCellView

- (id)initWithViewModel:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    0x0 = 0x0 - 0x10;
    r19 = [arg2 retain];
    *(int32_t *)r31 = self;
    *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d40e0;
    r20 = [[0x0 super] init];
    if (r20 != 0x0) {
            [r20 setViewModel:r19];
    }
    [r19 release];
    r0 = r20;
    0x0 = 0x10 - 0x10;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return r0;
}

- (void)setViewModel:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x22, [x8, #0x348] };
    r21 = *(int32_t *)(r20 + r22);
    if (r21 != r19) {
            if (r21 != 0x0) {
                    [r20 prepareForReuse];
                    r21 = *(int32_t *)(r20 + r22);
            }
            *(int32_t *)(r20 + r22) = [r19 retain];
            [r21 release];
            if (*(int32_t *)(r20 + r22) != 0x0) {
                    [r20 setNeedsLayout];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)prepareForReuse
{
    asm{ ldrsw      x9, [x9, #0x34c] };
    *(int32_t *)(self + 0x1039ea000) = **(int32_t *)CGSizeZero;
    r0 = [NSObject safeCancelPreviousPerformRequestsWithTarget:self];
    return;
}

- (id)canBeReused
{
    r0 = self;
    asm{ movz       w0, #0x0 };
    return r0;
}

- (id)shouldLayoutIfNeeded
{
    asm{ stp        d9, d8, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = self;
    asm{ ldrsw      x8, [x8, #0x34c] };
    r20 = r19 + 0x1039ea000;
    asm{ ldp        d8, d0, [x20] };
    asm{ ldp        d1, d2, [x8] };
    asm{ fcmp       d8, d1 };
    asm{ fccmp      d0, d2, #0x0, eq };
    if (CPU_FLAGS & E) {
            [r19 width];
            asm{ fsub       d0, d8, d0 };
            asm{ fabs       d0, d0 };
            asm{ fcmp       d0, d8 };
            if (CPU_FLAGS & LE) {
                    r0 = 0x1;
            }
            else {
                    r0 = [r19 height];
                    asm{ fsub       d0, d9, d0 };
                    asm{ fabs       d0, d0 };
                    asm{ fcmp       d0, d8 };
                    asm{ cset       w0, gt };
            }
    }
    else {
            r0 = 0x1;
    }
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x30 };
    return r0;
}

- (void)resetLayoutCache
{
    r0 = self;
    asm{ ldrsw      x8, [x8, #0x34c] };
    *(int32_t *)(r0 + 0x1039ea000) = **(int32_t *)CGSizeZero;
    return;
}

- (void)layoutSubviews
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = self;
    r0 = [self width];
    asm{ fcmp       d0, #0x0 };
    if (CPU_FLAGS & E) {
            r0 = [r19 height];
            asm{ fcmp       d0, #0x0 };
            if (CPU_FLAGS & E) {
                    asm{ ldrsw      x8, [x8, #0x348] };
                    r0 = *(int32_t *)(r19 + 0x1039ea000);
                    if (r0 != 0x0) {
                            r20 = @selector(shouldLayoutIfNeeded);
                            r0 = [r0 shouldLayoutIfNeeded];
                            if ((r0 & 0x1 << 0x0) == 0x0) {
                                    asm{ ldrsw      x21, [x8, #0x350] };
                                    *(int8_t *)(r19 + r21) = 0x1;
                                    if ([r19 shouldLayoutIfNeeded] != 0x0) {
                                            asm{ ldrsw      x8, [x8, #0x34c] };
                                            [r19 size];
                                            *(int32_t *)(r19 + 0x1039ea000) = d0;
                                            *(int32_t *)(0x8 + r19 + 0x1039ea000) = d1;
                                            [r19 layoutInternal];
                                    }
                                    r0 = [r19 layoutFinished];
                                    *(int8_t *)(r19 + r21) = 0x0;
                            }
                    }
            }
    }
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (void)layoutInternal
{
    r0 = self;
    return;
}

- (void)layoutFinished
{
    r0 = self;
    return;
}

- (void)onAppear
{
    r0 = self;
    return;
}

- (void)onDisappear
{
    r0 = self;
    return;
}

- (id)delegate
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    asm{ ldrsw      x8, [x8, #0x354] };
    r0 = objc_loadWeakRetained(self + 0x1039ea000);
    asm{ ldp        x29, x30, [sp], #0x10 };
    r0 = [r0 autorelease];
    return r0;
}

- (void)setDelegate:(id)arg2 
{
    asm{ ldrsw      x8, [x8, #0x354] };
    r0 = objc_storeWeak(self + 0x1039ea000, arg2);
    return;
}

- (id)viewModel
{
    asm{ ldrsw      x8, [x8, #0x348] };
    r0 = *(int32_t *)(self + 0x1039ea000);
    return r0;
}

- (id)isLayouting
{
    asm{ ldrsw      x8, [x8, #0x350] };
    r0 = *(int8_t *)(self + 0x1039ea000);
    return r0;
}

- (void)setIsLayouting:(id)arg2 
{
    r0 = self;
    asm{ ldrsw      x8, [x8, #0x350] };
    *(int8_t *)(r0 + 0x1039ea000) = arg2;
    return;
}

- (void).cxx_destruct
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0x348] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039ea000, _cmd);
    asm{ ldrsw      x8, [x8, #0x354] };
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = objc_destroyWeak(self + 0x1039ea000);
    return;
}

@end
